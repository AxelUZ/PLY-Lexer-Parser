
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENleftLBRACERBRACECOLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT GT ID IF INT LBRACE LPAREN LT MAIN MINUS NE PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES VAR VOID WHILEprogram : PROGRAM ID SEMICOLON return_vars MAIN body END\n               | PROGRAM ID SEMICOLON MAIN body ENDreturn_vars : vars\n                | return_vars varsvars : VAR list_vars COLON type SEMICOLON\n         | list_vars COLON type SEMICOLONlist_vars : ID\n              | list_vars COMMA IDtype : INT\n         | FLOATreturn_statement : statement\n                     | return_statement statement\n    body : LBRACE return_statement RBRACE\n    statement : assign\n              | condition\n              | cycle\n              | print\n              | empty\n    assign : ID seen_assign_ID EQUAL seen_term_EQUAL expression seen_exp_quad_E SEMICOLON\n    \n    seen_assign_ID :\n    \n    seen_term_EQUAL :\n    \n    seen_exp_quad_E :\n    condition : IF LPAREN expression RPAREN body\n              | IF LPAREN expression RPAREN body ELSE body\n    cycle : DO body WHILE LPAREN expression RPAREN SEMICOLON\n    print : PRINT LPAREN list_print_expression RPAREN SEMICOLON\n          | PRINT LPAREN list_print_cte RPAREN SEMICOLONlist_print_expression : expression\n              | list_print_expression COMMA expressionlist_print_cte : CTE_STRING\n              | list_print_cte COMMA CTE_STRING\n    expression : exp\n               | exp GT seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N\n               | exp LT seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N\n               | exp NE seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N\n    \n    seen_exp_GT_LT_NE :\n    \n    seen_exp_quad_G_L_N :\n    \n    exp : term\n        | exp PLUS seen_exp_PLUS_MINUS term seen_exp_quad_P_M\n        | exp MINUS seen_exp_PLUS_MINUS term seen_exp_quad_P_M\n    \n    seen_exp_PLUS_MINUS :\n    \n    seen_exp_quad_P_M :\n    \n    term : factor\n         | term TIMES seen_term_TIMES_DIVIDE factor seen_exp_quad_T_D\n         | term DIVIDE seen_term_TIMES_DIVIDE factor seen_exp_quad_T_D\n    \n    seen_term_TIMES_DIVIDE :\n    \n    seen_exp_quad_T_D :\n    factor : LPAREN expression RPAREN\n           | PLUS ID seen_factor_ID\n           | MINUS ID seen_factor_ID\n           | PLUS cte\n           | MINUS cte\n           | ID seen_factor_ID\n           | cte\n    seen_factor_ID :\n    cte : CTE_INT\n        | CTE_FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,36,],[0,-2,-1,]),'ID':([2,4,6,8,9,12,14,17,20,21,22,23,24,25,26,37,38,40,42,44,45,46,50,51,62,63,66,67,68,69,70,71,72,78,80,85,86,87,88,89,90,91,92,96,98,110,111,119,],[3,5,5,-3,5,-4,27,35,27,-11,-14,-15,-16,-17,-18,-13,-12,53,53,-6,-21,53,73,75,-5,53,-36,-36,-36,-41,-41,-46,-46,53,53,-23,53,53,53,53,53,53,53,-26,-27,-19,-24,-25,]),'SEMICOLON':([3,32,33,34,43,48,49,52,53,54,55,56,73,74,75,76,77,79,81,83,84,93,94,100,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,],[4,44,-9,-10,62,-32,-38,-43,-55,-54,-56,-57,-55,-51,-55,-52,-53,96,98,-22,-48,-49,-50,110,-37,-37,-37,-42,-42,-47,-47,119,-33,-34,-35,-39,-40,-44,-45,]),'MAIN':([4,6,8,12,44,62,],[7,11,-3,-4,-6,-5,]),'VAR':([4,6,8,12,44,62,],[9,9,-3,-4,-6,-5,]),'COLON':([5,10,15,35,],[-7,16,31,-8,]),'COMMA':([5,10,15,35,48,49,52,53,54,55,56,58,59,60,61,73,74,75,76,77,84,93,94,97,99,102,103,104,105,106,107,108,112,113,114,115,116,117,118,],[-7,17,17,-8,-32,-38,-43,-55,-54,-56,-57,80,82,-28,-30,-55,-51,-55,-52,-53,-48,-49,-50,-29,-31,-37,-37,-37,-42,-42,-47,-47,-33,-34,-35,-39,-40,-44,-45,]),'LBRACE':([7,11,29,65,101,],[14,14,14,14,14,]),'END':([13,18,37,],[19,36,-13,]),'IF':([14,20,21,22,23,24,25,26,37,38,85,96,98,110,111,119,],[28,28,-11,-14,-15,-16,-17,-18,-13,-12,-23,-26,-27,-19,-24,-25,]),'DO':([14,20,21,22,23,24,25,26,37,38,85,96,98,110,111,119,],[29,29,-11,-14,-15,-16,-17,-18,-13,-12,-23,-26,-27,-19,-24,-25,]),'PRINT':([14,20,21,22,23,24,25,26,37,38,85,96,98,110,111,119,],[30,30,-11,-14,-15,-16,-17,-18,-13,-12,-23,-26,-27,-19,-24,-25,]),'RBRACE':([14,20,21,22,23,24,25,26,37,38,85,96,98,110,111,119,],[-58,37,-11,-14,-15,-16,-17,-18,-13,-12,-23,-26,-27,-19,-24,-25,]),'INT':([16,31,],[33,33,]),'FLOAT':([16,31,],[34,34,]),'EQUAL':([27,39,],[-20,45,]),'LPAREN':([28,30,40,42,45,46,57,63,66,67,68,69,70,71,72,78,80,86,87,88,89,90,91,92,],[40,42,46,46,-21,46,78,46,-36,-36,-36,-41,-41,-46,-46,46,46,46,46,46,46,46,46,46,]),'WHILE':([37,41,],[-13,57,]),'ELSE':([37,85,],[-13,101,]),'PLUS':([40,42,45,46,48,49,52,53,54,55,56,63,66,67,68,69,70,71,72,73,74,75,76,77,78,80,84,86,87,88,89,90,91,92,93,94,102,103,104,105,106,107,108,115,116,117,118,],[50,50,-21,50,69,-38,-43,-55,-54,-56,-57,50,-36,-36,-36,-41,-41,-46,-46,-55,-51,-55,-52,-53,50,50,-48,50,50,50,50,50,50,50,-49,-50,69,69,69,-42,-42,-47,-47,-39,-40,-44,-45,]),'MINUS':([40,42,45,46,48,49,52,53,54,55,56,63,66,67,68,69,70,71,72,73,74,75,76,77,78,80,84,86,87,88,89,90,91,92,93,94,102,103,104,105,106,107,108,115,116,117,118,],[51,51,-21,51,70,-38,-43,-55,-54,-56,-57,51,-36,-36,-36,-41,-41,-46,-46,-55,-51,-55,-52,-53,51,51,-48,51,51,51,51,51,51,51,-49,-50,70,70,70,-42,-42,-47,-47,-39,-40,-44,-45,]),'CTE_INT':([40,42,45,46,50,51,63,66,67,68,69,70,71,72,78,80,86,87,88,89,90,91,92,],[55,55,-21,55,55,55,55,-36,-36,-36,-41,-41,-46,-46,55,55,55,55,55,55,55,55,55,]),'CTE_FLOAT':([40,42,45,46,50,51,63,66,67,68,69,70,71,72,78,80,86,87,88,89,90,91,92,],[56,56,-21,56,56,56,56,-36,-36,-36,-41,-41,-46,-46,56,56,56,56,56,56,56,56,56,]),'CTE_STRING':([42,82,],[61,99,]),'RPAREN':([47,48,49,52,53,54,55,56,58,59,60,61,64,73,74,75,76,77,84,93,94,95,97,99,102,103,104,105,106,107,108,112,113,114,115,116,117,118,],[65,-32,-38,-43,-55,-54,-56,-57,79,81,-28,-30,84,-55,-51,-55,-52,-53,-48,-49,-50,109,-29,-31,-37,-37,-37,-42,-42,-47,-47,-33,-34,-35,-39,-40,-44,-45,]),'GT':([48,49,52,53,54,55,56,73,74,75,76,77,84,93,94,105,106,107,108,115,116,117,118,],[66,-38,-43,-55,-54,-56,-57,-55,-51,-55,-52,-53,-48,-49,-50,-42,-42,-47,-47,-39,-40,-44,-45,]),'LT':([48,49,52,53,54,55,56,73,74,75,76,77,84,93,94,105,106,107,108,115,116,117,118,],[67,-38,-43,-55,-54,-56,-57,-55,-51,-55,-52,-53,-48,-49,-50,-42,-42,-47,-47,-39,-40,-44,-45,]),'NE':([48,49,52,53,54,55,56,73,74,75,76,77,84,93,94,105,106,107,108,115,116,117,118,],[68,-38,-43,-55,-54,-56,-57,-55,-51,-55,-52,-53,-48,-49,-50,-42,-42,-47,-47,-39,-40,-44,-45,]),'TIMES':([49,52,53,54,55,56,73,74,75,76,77,84,93,94,105,106,107,108,117,118,],[71,-43,-55,-54,-56,-57,-55,-51,-55,-52,-53,-48,-49,-50,71,71,-47,-47,-44,-45,]),'DIVIDE':([49,52,53,54,55,56,73,74,75,76,77,84,93,94,105,106,107,108,117,118,],[72,-43,-55,-54,-56,-57,-55,-51,-55,-52,-53,-48,-49,-50,72,72,-47,-47,-44,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'return_vars':([4,],[6,]),'vars':([4,6,],[8,12,]),'list_vars':([4,6,9,],[10,10,15,]),'body':([7,11,29,65,101,],[13,18,41,85,111,]),'return_statement':([14,],[20,]),'statement':([14,20,],[21,38,]),'assign':([14,20,],[22,22,]),'condition':([14,20,],[23,23,]),'cycle':([14,20,],[24,24,]),'print':([14,20,],[25,25,]),'empty':([14,20,],[26,26,]),'type':([16,31,],[32,43,]),'seen_assign_ID':([27,],[39,]),'expression':([40,42,46,63,78,80,],[47,60,64,83,95,97,]),'exp':([40,42,46,63,78,80,86,87,88,],[48,48,48,48,48,48,102,103,104,]),'term':([40,42,46,63,78,80,86,87,88,89,90,],[49,49,49,49,49,49,49,49,49,105,106,]),'factor':([40,42,46,63,78,80,86,87,88,89,90,91,92,],[52,52,52,52,52,52,52,52,52,52,52,107,108,]),'cte':([40,42,46,50,51,63,78,80,86,87,88,89,90,91,92,],[54,54,54,74,76,54,54,54,54,54,54,54,54,54,54,]),'list_print_expression':([42,],[58,]),'list_print_cte':([42,],[59,]),'seen_term_EQUAL':([45,],[63,]),'seen_factor_ID':([53,73,75,],[77,93,94,]),'seen_exp_GT_LT_NE':([66,67,68,],[86,87,88,]),'seen_exp_PLUS_MINUS':([69,70,],[89,90,]),'seen_term_TIMES_DIVIDE':([71,72,],[91,92,]),'seen_exp_quad_E':([83,],[100,]),'seen_exp_quad_G_L_N':([102,103,104,],[112,113,114,]),'seen_exp_quad_P_M':([105,106,],[115,116,]),'seen_exp_quad_T_D':([107,108,],[117,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON return_vars MAIN body END','program',7,'p_program','parser.py',22),
  ('program -> PROGRAM ID SEMICOLON MAIN body END','program',6,'p_program','parser.py',23),
  ('return_vars -> vars','return_vars',1,'p_return_vars','parser.py',34),
  ('return_vars -> return_vars vars','return_vars',2,'p_return_vars','parser.py',35),
  ('vars -> VAR list_vars COLON type SEMICOLON','vars',5,'p_vars','parser.py',46),
  ('vars -> list_vars COLON type SEMICOLON','vars',4,'p_vars','parser.py',47),
  ('list_vars -> ID','list_vars',1,'p_list_vars','parser.py',61),
  ('list_vars -> list_vars COMMA ID','list_vars',3,'p_list_vars','parser.py',62),
  ('type -> INT','type',1,'p_type','parser.py',73),
  ('type -> FLOAT','type',1,'p_type','parser.py',74),
  ('return_statement -> statement','return_statement',1,'p_return_statement','parser.py',80),
  ('return_statement -> return_statement statement','return_statement',2,'p_return_statement','parser.py',81),
  ('body -> LBRACE return_statement RBRACE','body',3,'p_body','parser.py',92),
  ('statement -> assign','statement',1,'p_statement','parser.py',100),
  ('statement -> condition','statement',1,'p_statement','parser.py',101),
  ('statement -> cycle','statement',1,'p_statement','parser.py',102),
  ('statement -> print','statement',1,'p_statement','parser.py',103),
  ('statement -> empty','statement',1,'p_statement','parser.py',104),
  ('assign -> ID seen_assign_ID EQUAL seen_term_EQUAL expression seen_exp_quad_E SEMICOLON','assign',7,'p_assign','parser.py',111),
  ('seen_assign_ID -> <empty>','seen_assign_ID',0,'p_seen_assign_ID','parser.py',121),
  ('seen_term_EQUAL -> <empty>','seen_term_EQUAL',0,'p_seen_term_EQUAL','parser.py',129),
  ('seen_exp_quad_E -> <empty>','seen_exp_quad_E',0,'p_seen_exp_quad_E','parser.py',137),
  ('condition -> IF LPAREN expression RPAREN body','condition',5,'p_condition','parser.py',162),
  ('condition -> IF LPAREN expression RPAREN body ELSE body','condition',7,'p_condition','parser.py',163),
  ('cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON','cycle',7,'p_cycle','parser.py',175),
  ('print -> PRINT LPAREN list_print_expression RPAREN SEMICOLON','print',5,'p_print','parser.py',182),
  ('print -> PRINT LPAREN list_print_cte RPAREN SEMICOLON','print',5,'p_print','parser.py',183),
  ('list_print_expression -> expression','list_print_expression',1,'p_list_print_expression','parser.py',189),
  ('list_print_expression -> list_print_expression COMMA expression','list_print_expression',3,'p_list_print_expression','parser.py',190),
  ('list_print_cte -> CTE_STRING','list_print_cte',1,'p_list_print_cte','parser.py',201),
  ('list_print_cte -> list_print_cte COMMA CTE_STRING','list_print_cte',3,'p_list_print_cte','parser.py',202),
  ('expression -> exp','expression',1,'p_expression','parser.py',214),
  ('expression -> exp GT seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N','expression',5,'p_expression','parser.py',215),
  ('expression -> exp LT seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N','expression',5,'p_expression','parser.py',216),
  ('expression -> exp NE seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N','expression',5,'p_expression','parser.py',217),
  ('seen_exp_GT_LT_NE -> <empty>','seen_exp_GT_LT_NE',0,'p_seen_exp_GT_LT_NE','parser.py',228),
  ('seen_exp_quad_G_L_N -> <empty>','seen_exp_quad_G_L_N',0,'p_seen_exp_quad_G_L_N','parser.py',235),
  ('exp -> term','exp',1,'p_exp','parser.py',263),
  ('exp -> exp PLUS seen_exp_PLUS_MINUS term seen_exp_quad_P_M','exp',5,'p_exp','parser.py',264),
  ('exp -> exp MINUS seen_exp_PLUS_MINUS term seen_exp_quad_P_M','exp',5,'p_exp','parser.py',265),
  ('seen_exp_PLUS_MINUS -> <empty>','seen_exp_PLUS_MINUS',0,'p_seen_exp_PLUS_MINUS','parser.py',280),
  ('seen_exp_quad_P_M -> <empty>','seen_exp_quad_P_M',0,'p_seen_exp_quad_P_M','parser.py',288),
  ('term -> factor','term',1,'p_term','parser.py',316),
  ('term -> term TIMES seen_term_TIMES_DIVIDE factor seen_exp_quad_T_D','term',5,'p_term','parser.py',317),
  ('term -> term DIVIDE seen_term_TIMES_DIVIDE factor seen_exp_quad_T_D','term',5,'p_term','parser.py',318),
  ('seen_term_TIMES_DIVIDE -> <empty>','seen_term_TIMES_DIVIDE',0,'p_seen_term_TIMES_DIVIDE','parser.py',333),
  ('seen_exp_quad_T_D -> <empty>','seen_exp_quad_T_D',0,'p_seen_exp_quad_T_D','parser.py',341),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',367),
  ('factor -> PLUS ID seen_factor_ID','factor',3,'p_factor','parser.py',368),
  ('factor -> MINUS ID seen_factor_ID','factor',3,'p_factor','parser.py',369),
  ('factor -> PLUS cte','factor',2,'p_factor','parser.py',370),
  ('factor -> MINUS cte','factor',2,'p_factor','parser.py',371),
  ('factor -> ID seen_factor_ID','factor',2,'p_factor','parser.py',372),
  ('factor -> cte','factor',1,'p_factor','parser.py',373),
  ('seen_factor_ID -> <empty>','seen_factor_ID',0,'p_seen_factor_ID','parser.py',386),
  ('cte -> CTE_INT','cte',1,'p_cte','parser.py',393),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','parser.py',394),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',401),
]
