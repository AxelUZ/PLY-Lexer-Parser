
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENleftLBRACERBRACEleftLBRACKETRBRACKETCOLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT GT ID IF INT LBRACE LBRACKET LPAREN LT MAIN MINUS NE PLUS PRINT PROGRAM RBRACE RBRACKET RPAREN SEMICOLON TIMES VAR VOID WHILEprogram : PROGRAM ID SEMICOLON vars funcs MAIN body END\n    vars : VAR ID COLON type SEMICOLON\n         | VAR ID COLON type SEMICOLON vars\n    \n    type : INT\n         | FLOAT\n    \n    body : LBRACE statement RBRACE\n    \n    function_params : ID COLON type\n                    | function_params COMMA ID COLON type\n    \n    funcs : VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON\n          | VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs\n          | VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON\n          | VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs\n    \n    statement : assign\n              | condition\n              | cycle\n              | f_call\n              | print\n    assign : ID EQUAL expression SEMICOLON\n    condition : IF LPAREN expression RPAREN body\n              | IF LPAREN expression RPAREN body ELSE body\n    \n    cycle : DO body WHILE LPAREN expression RPAREN SEMICOLON\n    \n    f_call : ID LPAREN optional_arguments RPAREN SEMICOLON\n    \n    optional_arguments : expression\n                        | optional_arguments COMMA expression\n    \n    print : PRINT LPAREN expression RPAREN SEMICOLON\n                    | PRINT LPAREN CTE_STRING RPAREN SEMICOLON\n    \n    expression : exp\n               | exp GT exp\n               | exp LT exp\n               | exp NE exp\n    \n    exp : term\n        | exp PLUS term\n        | exp MINUS term\n    \n    term : factor\n         | term TIMES factor\n         | term DIVIDE factor\n    \n    factor : LPAREN expression RPAREN\n           | PLUS ID\n           | MINUS ID\n           | PLUS cte\n           | MINUS cte\n           | ID\n           | cte\n    \n    cte : CTE_INT\n        | CTE_FLOAT\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,],[0,-1,]),'ID':([2,6,8,14,15,35,36,37,39,42,49,50,52,67,68,69,70,71,72,73,80,82,],[3,9,11,26,30,45,45,45,45,64,74,76,45,45,45,45,45,45,45,45,45,45,]),'SEMICOLON':([3,16,17,18,45,46,47,48,51,53,54,55,74,75,76,77,79,83,84,88,89,90,91,92,93,94,95,104,106,107,],[4,33,-4,-5,-42,66,-27,-31,-34,-43,-44,-45,-38,-40,-39,-41,96,100,101,-28,-29,-30,-32,-33,-35,-36,-37,108,110,111,]),'VAR':([4,33,43,63,],[6,6,6,6,]),'VOID':([5,33,44,108,111,],[8,-2,-3,8,8,]),'MAIN':([7,108,111,112,113,],[10,-11,-9,-12,-10,]),'COLON':([9,30,64,],[12,40,86,]),'LBRACE':([10,28,33,44,65,81,85,105,],[14,14,-2,-3,14,14,14,14,]),'LPAREN':([11,26,27,29,35,36,37,39,52,59,67,68,69,70,71,72,73,80,82,],[15,36,37,39,52,52,52,52,52,82,52,52,52,52,52,52,52,52,52,]),'INT':([12,40,86,],[17,17,17,]),'FLOAT':([12,40,86,],[18,18,18,]),'END':([13,34,],[19,-6,]),'IF':([14,],[27,]),'DO':([14,],[28,]),'PRINT':([14,],[29,]),'RPAREN':([15,17,18,31,45,47,48,51,53,54,55,56,57,58,60,61,62,74,75,76,77,78,88,89,90,91,92,93,94,95,97,99,103,],[32,-4,-5,41,-42,-27,-31,-34,-43,-44,-45,79,-23,81,83,84,-7,-38,-40,-39,-41,95,-28,-29,-30,-32,-33,-35,-36,-37,-24,106,-8,]),'COMMA':([17,18,31,45,47,48,51,53,54,55,56,57,62,74,75,76,77,88,89,90,91,92,93,94,95,97,103,],[-4,-5,42,-42,-27,-31,-34,-43,-44,-45,80,-23,-7,-38,-40,-39,-41,-28,-29,-30,-32,-33,-35,-36,-37,-24,-8,]),'RBRACE':([20,21,22,23,24,25,34,66,96,98,100,101,109,110,],[34,-13,-14,-15,-16,-17,-6,-18,-22,-19,-25,-26,-20,-21,]),'EQUAL':([26,],[35,]),'LBRACKET':([32,41,],[43,63,]),'WHILE':([34,38,],[-6,59,]),'RBRACKET':([34,87,102,],[-6,104,107,]),'ELSE':([34,98,],[-6,105,]),'PLUS':([35,36,37,39,45,47,48,51,52,53,54,55,67,68,69,70,71,72,73,74,75,76,77,80,82,88,89,90,91,92,93,94,95,],[49,49,49,49,-42,70,-31,-34,49,-43,-44,-45,49,49,49,49,49,49,49,-38,-40,-39,-41,49,49,70,70,70,-32,-33,-35,-36,-37,]),'MINUS':([35,36,37,39,45,47,48,51,52,53,54,55,67,68,69,70,71,72,73,74,75,76,77,80,82,88,89,90,91,92,93,94,95,],[50,50,50,50,-42,71,-31,-34,50,-43,-44,-45,50,50,50,50,50,50,50,-38,-40,-39,-41,50,50,71,71,71,-32,-33,-35,-36,-37,]),'CTE_INT':([35,36,37,39,49,50,52,67,68,69,70,71,72,73,80,82,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'CTE_FLOAT':([35,36,37,39,49,50,52,67,68,69,70,71,72,73,80,82,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'CTE_STRING':([39,],[61,]),'TIMES':([45,48,51,53,54,55,74,75,76,77,91,92,93,94,95,],[-42,72,-34,-43,-44,-45,-38,-40,-39,-41,72,72,-35,-36,-37,]),'DIVIDE':([45,48,51,53,54,55,74,75,76,77,91,92,93,94,95,],[-42,73,-34,-43,-44,-45,-38,-40,-39,-41,73,73,-35,-36,-37,]),'GT':([45,47,48,51,53,54,55,74,75,76,77,91,92,93,94,95,],[-42,67,-31,-34,-43,-44,-45,-38,-40,-39,-41,-32,-33,-35,-36,-37,]),'LT':([45,47,48,51,53,54,55,74,75,76,77,91,92,93,94,95,],[-42,68,-31,-34,-43,-44,-45,-38,-40,-39,-41,-32,-33,-35,-36,-37,]),'NE':([45,47,48,51,53,54,55,74,75,76,77,91,92,93,94,95,],[-42,69,-31,-34,-43,-44,-45,-38,-40,-39,-41,-32,-33,-35,-36,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,33,43,63,],[5,44,65,85,]),'funcs':([5,108,111,],[7,112,113,]),'body':([10,28,65,81,85,105,],[13,38,87,98,102,109,]),'type':([12,40,86,],[16,62,103,]),'statement':([14,],[20,]),'assign':([14,],[21,]),'condition':([14,],[22,]),'cycle':([14,],[23,]),'f_call':([14,],[24,]),'print':([14,],[25,]),'function_params':([15,],[31,]),'expression':([35,36,37,39,52,80,82,],[46,57,58,60,78,97,99,]),'exp':([35,36,37,39,52,67,68,69,80,82,],[47,47,47,47,47,88,89,90,47,47,]),'term':([35,36,37,39,52,67,68,69,70,71,80,82,],[48,48,48,48,48,48,48,48,91,92,48,48,]),'factor':([35,36,37,39,52,67,68,69,70,71,72,73,80,82,],[51,51,51,51,51,51,51,51,51,51,93,94,51,51,]),'cte':([35,36,37,39,49,50,52,67,68,69,70,71,72,73,80,82,],[53,53,53,53,75,77,53,53,53,53,53,53,53,53,53,53,]),'optional_arguments':([36,],[56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars funcs MAIN body END','program',8,'p_program','parser.py',15),
  ('vars -> VAR ID COLON type SEMICOLON','vars',5,'p_vars','parser.py',21),
  ('vars -> VAR ID COLON type SEMICOLON vars','vars',6,'p_vars','parser.py',22),
  ('type -> INT','type',1,'p_type','parser.py',32),
  ('type -> FLOAT','type',1,'p_type','parser.py',33),
  ('body -> LBRACE statement RBRACE','body',3,'p_body','parser.py',40),
  ('function_params -> ID COLON type','function_params',3,'p_function_params','parser.py',48),
  ('function_params -> function_params COMMA ID COLON type','function_params',5,'p_function_params','parser.py',49),
  ('funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON','funcs',10,'p_funcs','parser.py',60),
  ('funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs','funcs',11,'p_funcs','parser.py',61),
  ('funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON','funcs',9,'p_funcs','parser.py',62),
  ('funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs','funcs',10,'p_funcs','parser.py',63),
  ('statement -> assign','statement',1,'p_statement','parser.py',73),
  ('statement -> condition','statement',1,'p_statement','parser.py',74),
  ('statement -> cycle','statement',1,'p_statement','parser.py',75),
  ('statement -> f_call','statement',1,'p_statement','parser.py',76),
  ('statement -> print','statement',1,'p_statement','parser.py',77),
  ('assign -> ID EQUAL expression SEMICOLON','assign',4,'p_assign','parser.py',83),
  ('condition -> IF LPAREN expression RPAREN body','condition',5,'p_condition','parser.py',89),
  ('condition -> IF LPAREN expression RPAREN body ELSE body','condition',7,'p_condition','parser.py',90),
  ('cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON','cycle',7,'p_cycle','parser.py',100),
  ('f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON','f_call',5,'p_f_call','parser.py',108),
  ('optional_arguments -> expression','optional_arguments',1,'p_optional_arguments','parser.py',116),
  ('optional_arguments -> optional_arguments COMMA expression','optional_arguments',3,'p_optional_arguments','parser.py',117),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','parser.py',127),
  ('print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON','print',5,'p_print','parser.py',128),
  ('expression -> exp','expression',1,'p_expression','parser.py',136),
  ('expression -> exp GT exp','expression',3,'p_expression','parser.py',137),
  ('expression -> exp LT exp','expression',3,'p_expression','parser.py',138),
  ('expression -> exp NE exp','expression',3,'p_expression','parser.py',139),
  ('exp -> term','exp',1,'p_exp','parser.py',149),
  ('exp -> exp PLUS term','exp',3,'p_exp','parser.py',150),
  ('exp -> exp MINUS term','exp',3,'p_exp','parser.py',151),
  ('term -> factor','term',1,'p_term','parser.py',163),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',164),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',165),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',177),
  ('factor -> PLUS ID','factor',2,'p_factor','parser.py',178),
  ('factor -> MINUS ID','factor',2,'p_factor','parser.py',179),
  ('factor -> PLUS cte','factor',2,'p_factor','parser.py',180),
  ('factor -> MINUS cte','factor',2,'p_factor','parser.py',181),
  ('factor -> ID','factor',1,'p_factor','parser.py',182),
  ('factor -> cte','factor',1,'p_factor','parser.py',183),
  ('cte -> CTE_INT','cte',1,'p_cte','parser.py',195),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','parser.py',196),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',205),
]
