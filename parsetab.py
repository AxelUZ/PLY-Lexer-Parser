
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENleftLBRACERBRACECOLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT GT ID IF INT LBRACE LPAREN LT MAIN MINUS NE PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES VAR VOID WHILEprogram : PROGRAM ID SEMICOLON vars MAIN body END\n    vars : VAR ID COLON type SEMICOLON\n         | VAR ID COLON type SEMICOLON vars\n    \n    type : INT\n         | FLOAT\n    \n    body : LBRACE statement RBRACE\n    \n    statement : assign\n              | condition\n              | cycle\n              | print\n              | empty\n\n    assign : ID EQUAL expression SEMICOLON \n    condition : IF LPAREN expression RPAREN body\n              | IF LPAREN expression RPAREN body ELSE body\n    \n    cycle : DO body WHILE LPAREN expression RPAREN SEMICOLON\n    \n    print : PRINT LPAREN expression RPAREN SEMICOLON\n          | PRINT LPAREN CTE_STRING RPAREN SEMICOLON\n    \n    expression : exp\n               | exp GT exp\n               | exp LT exp\n               | exp NE exp\n    \n    exp : term\n        | exp PLUS term\n        | exp MINUS term\n    \n    term : factor\n         | term TIMES factor\n         | term DIVIDE factor\n    \n    factor : LPAREN expression RPAREN\n           | PLUS ID\n           | MINUS ID\n           | PLUS cte\n           | MINUS cte\n           | ID\n           | cte\n    \n    cte : CTE_INT\n        | CTE_FLOAT\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'ID':([2,6,10,27,28,30,36,37,39,49,50,51,52,53,54,55,62,],[3,8,19,32,32,32,56,58,32,32,32,32,32,32,32,32,32,]),'SEMICOLON':([3,23,24,25,32,33,34,35,38,40,41,42,56,57,58,59,63,64,65,66,67,68,69,70,71,72,78,],[4,31,-4,-5,-33,48,-18,-22,-25,-34,-35,-36,-29,-31,-30,-32,75,76,-19,-20,-21,-23,-24,-26,-27,-28,80,]),'VAR':([4,31,],[6,6,]),'MAIN':([5,31,47,],[7,-2,-3,]),'LBRACE':([7,21,61,77,],[10,10,10,10,]),'COLON':([8,],[11,]),'END':([9,26,],[12,-6,]),'IF':([10,],[20,]),'DO':([10,],[21,]),'PRINT':([10,],[22,]),'RBRACE':([10,13,14,15,16,17,18,26,48,73,75,76,79,80,],[-37,26,-7,-8,-9,-10,-11,-6,-12,-13,-16,-17,-14,-15,]),'INT':([11,],[24,]),'FLOAT':([11,],[25,]),'EQUAL':([19,],[27,]),'LPAREN':([20,22,27,28,30,39,44,49,50,51,52,53,54,55,62,],[28,30,39,39,39,39,62,39,39,39,39,39,39,39,39,]),'WHILE':([26,29,],[-6,44,]),'ELSE':([26,73,],[-6,77,]),'PLUS':([27,28,30,32,34,35,38,39,40,41,42,49,50,51,52,53,54,55,56,57,58,59,62,65,66,67,68,69,70,71,72,],[36,36,36,-33,52,-22,-25,36,-34,-35,-36,36,36,36,36,36,36,36,-29,-31,-30,-32,36,52,52,52,-23,-24,-26,-27,-28,]),'MINUS':([27,28,30,32,34,35,38,39,40,41,42,49,50,51,52,53,54,55,56,57,58,59,62,65,66,67,68,69,70,71,72,],[37,37,37,-33,53,-22,-25,37,-34,-35,-36,37,37,37,37,37,37,37,-29,-31,-30,-32,37,53,53,53,-23,-24,-26,-27,-28,]),'CTE_INT':([27,28,30,36,37,39,49,50,51,52,53,54,55,62,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'CTE_FLOAT':([27,28,30,36,37,39,49,50,51,52,53,54,55,62,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'CTE_STRING':([30,],[46,]),'TIMES':([32,35,38,40,41,42,56,57,58,59,68,69,70,71,72,],[-33,54,-25,-34,-35,-36,-29,-31,-30,-32,54,54,-26,-27,-28,]),'DIVIDE':([32,35,38,40,41,42,56,57,58,59,68,69,70,71,72,],[-33,55,-25,-34,-35,-36,-29,-31,-30,-32,55,55,-26,-27,-28,]),'GT':([32,34,35,38,40,41,42,56,57,58,59,68,69,70,71,72,],[-33,49,-22,-25,-34,-35,-36,-29,-31,-30,-32,-23,-24,-26,-27,-28,]),'LT':([32,34,35,38,40,41,42,56,57,58,59,68,69,70,71,72,],[-33,50,-22,-25,-34,-35,-36,-29,-31,-30,-32,-23,-24,-26,-27,-28,]),'NE':([32,34,35,38,40,41,42,56,57,58,59,68,69,70,71,72,],[-33,51,-22,-25,-34,-35,-36,-29,-31,-30,-32,-23,-24,-26,-27,-28,]),'RPAREN':([32,34,35,38,40,41,42,43,45,46,56,57,58,59,60,65,66,67,68,69,70,71,72,74,],[-33,-18,-22,-25,-34,-35,-36,61,63,64,-29,-31,-30,-32,72,-19,-20,-21,-23,-24,-26,-27,-28,78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,31,],[5,47,]),'body':([7,21,61,77,],[9,29,73,79,]),'statement':([10,],[13,]),'assign':([10,],[14,]),'condition':([10,],[15,]),'cycle':([10,],[16,]),'print':([10,],[17,]),'empty':([10,],[18,]),'type':([11,],[23,]),'expression':([27,28,30,39,62,],[33,43,45,60,74,]),'exp':([27,28,30,39,49,50,51,62,],[34,34,34,34,65,66,67,34,]),'term':([27,28,30,39,49,50,51,52,53,62,],[35,35,35,35,35,35,35,68,69,35,]),'factor':([27,28,30,39,49,50,51,52,53,54,55,62,],[38,38,38,38,38,38,38,38,38,70,71,38,]),'cte':([27,28,30,36,37,39,49,50,51,52,53,54,55,62,],[40,40,40,57,59,40,40,40,40,40,40,40,40,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars MAIN body END','program',7,'p_program','parser.py',16),
  ('vars -> VAR ID COLON type SEMICOLON','vars',5,'p_vars','parser.py',24),
  ('vars -> VAR ID COLON type SEMICOLON vars','vars',6,'p_vars','parser.py',25),
  ('type -> INT','type',1,'p_type','parser.py',39),
  ('type -> FLOAT','type',1,'p_type','parser.py',40),
  ('body -> LBRACE statement RBRACE','body',3,'p_body','parser.py',47),
  ('statement -> assign','statement',1,'p_statement','parser.py',53),
  ('statement -> condition','statement',1,'p_statement','parser.py',54),
  ('statement -> cycle','statement',1,'p_statement','parser.py',55),
  ('statement -> print','statement',1,'p_statement','parser.py',56),
  ('statement -> empty','statement',1,'p_statement','parser.py',57),
  ('assign -> ID EQUAL expression SEMICOLON','assign',4,'p_assign','parser.py',64),
  ('condition -> IF LPAREN expression RPAREN body','condition',5,'p_condition','parser.py',70),
  ('condition -> IF LPAREN expression RPAREN body ELSE body','condition',7,'p_condition','parser.py',71),
  ('cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON','cycle',7,'p_cycle','parser.py',81),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','parser.py',87),
  ('print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON','print',5,'p_print','parser.py',88),
  ('expression -> exp','expression',1,'p_expression','parser.py',96),
  ('expression -> exp GT exp','expression',3,'p_expression','parser.py',97),
  ('expression -> exp LT exp','expression',3,'p_expression','parser.py',98),
  ('expression -> exp NE exp','expression',3,'p_expression','parser.py',99),
  ('exp -> term','exp',1,'p_exp','parser.py',109),
  ('exp -> exp PLUS term','exp',3,'p_exp','parser.py',110),
  ('exp -> exp MINUS term','exp',3,'p_exp','parser.py',111),
  ('term -> factor','term',1,'p_term','parser.py',123),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',124),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',125),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',137),
  ('factor -> PLUS ID','factor',2,'p_factor','parser.py',138),
  ('factor -> MINUS ID','factor',2,'p_factor','parser.py',139),
  ('factor -> PLUS cte','factor',2,'p_factor','parser.py',140),
  ('factor -> MINUS cte','factor',2,'p_factor','parser.py',141),
  ('factor -> ID','factor',1,'p_factor','parser.py',142),
  ('factor -> cte','factor',1,'p_factor','parser.py',143),
  ('cte -> CTE_INT','cte',1,'p_cte','parser.py',155),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','parser.py',156),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',165),
]
