
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT GT ID IF INT LBRACE LPAREN LT MAIN MINUS NE PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES VAR WHILEprogram : PROGRAM ID SEMICOLON return_vars MAIN body END\n               | PROGRAM ID SEMICOLON MAIN body ENDreturn_vars : vars\n                | return_vars varsvars : VAR list_vars COLON type SEMICOLON\n         | list_vars COLON type SEMICOLONlist_vars : ID\n              | list_vars COMMA IDtype : INT\n         | FLOATreturn_statement : statement\n                     | return_statement statement\n    body : LBRACE return_statement RBRACE\n    statement : assign\n              | condition\n              | cycle\n              | print\n              | empty\n    assign : ID seen_assign_ID EQUAL seen_term_EQUAL expression seen_exp_quad_E SEMICOLON\n    \n    seen_assign_ID :\n    \n    seen_term_EQUAL :\n    \n    seen_exp_quad_E :\n    condition : IF LPAREN expression seen_condition_IF RPAREN body SEMICOLON\n              | IF LPAREN expression seen_condition_IF RPAREN body ELSE seen_condition_else body SEMICOLON \n    seen_condition_IF :\n    \n    seen_condition_else :\n    \n    cycle : DO seen_start_cycle body WHILE LPAREN expression seen_cycle RPAREN SEMICOLON\n    \n    seen_cycle :\n    \n    seen_start_cycle :\n    print : PRINT seen_print_PRINT LPAREN list_print_expression RPAREN SEMICOLON\n          | PRINT seen_print_PRINT LPAREN list_print_cte RPAREN SEMICOLONlist_print_expression : expression seen_print_quad_PRINT\n              | list_print_expression COMMA seen_print_PARINT_COMMA expression seen_print_quad_PRINTlist_print_cte : CTE_STRING\n              | list_print_cte COMMA CTE_STRING\n     seen_print_PRINT :\n    \n    seen_print_PARINT_COMMA :\n    \n    seen_print_quad_PRINT :\n    \n    expression : exp\n               | exp GT seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N\n               | exp LT seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N\n               | exp NE seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N\n    \n    seen_exp_GT_LT_NE :\n    \n    seen_exp_quad_G_L_N :\n    \n    exp : term\n        | exp PLUS seen_exp_PLUS_MINUS term seen_exp_quad_P_M\n        | exp MINUS seen_exp_PLUS_MINUS term seen_exp_quad_P_M\n    \n    seen_exp_PLUS_MINUS :\n    \n    seen_exp_quad_P_M :\n    \n    term : factor\n         | term TIMES seen_term_TIMES_DIVIDE factor seen_exp_quad_T_D\n         | term DIVIDE seen_term_TIMES_DIVIDE factor seen_exp_quad_T_D\n    \n    seen_term_TIMES_DIVIDE :\n    \n    seen_exp_quad_T_D :\n    factor : LPAREN expression RPAREN\n           | PLUS ID seen_factor_ID verify_declaration\n           | MINUS ID seen_factor_ID verify_declaration\n           | PLUS cte\n           | MINUS cte\n           | ID seen_factor_ID verify_declaration\n           | cte\n    seen_factor_ID :\n    \n    verify_declaration :\n    cte : CTE_INT seen_INT\n        | CTE_FLOAT seen_FLOAT\n    seen_INT :\n    \n    seen_FLOAT :\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,36,],[0,-2,-1,]),'ID':([2,4,6,8,9,12,14,17,20,21,22,23,24,25,26,38,40,44,45,46,50,51,58,59,60,63,64,65,66,67,68,69,85,86,87,88,89,90,91,95,97,113,114,115,117,118,133,134,],[3,5,5,-3,5,-4,27,35,27,-11,-14,-15,-16,-17,-18,-12,53,-6,-21,53,70,72,53,-5,53,-43,-43,-43,-48,-48,-53,-53,53,53,53,53,53,53,53,53,-37,-30,53,-31,-19,-23,-27,-24,]),'SEMICOLON':([3,32,33,34,37,43,48,49,52,53,54,55,56,70,71,72,73,74,75,76,82,83,92,93,94,96,98,101,102,103,104,105,106,107,108,109,110,111,120,121,122,123,124,125,126,130,132,],[4,44,-9,-10,-13,59,-39,-45,-50,-62,-61,-66,-67,-62,-58,-62,-59,-63,-64,-65,-22,-55,-63,-63,-60,113,115,117,118,-44,-44,-44,-49,-49,-54,-54,-56,-57,-40,-41,-42,-46,-47,-51,-52,133,134,]),'MAIN':([4,6,8,12,44,59,],[7,11,-3,-4,-6,-5,]),'VAR':([4,6,8,12,44,59,],[9,9,-3,-4,-6,-5,]),'COLON':([5,10,15,35,],[-7,16,31,-8,]),'COMMA':([5,10,15,35,48,49,52,53,54,55,56,70,71,72,73,74,75,76,78,79,80,81,83,92,93,94,100,103,104,105,106,107,108,109,110,111,116,120,121,122,123,124,125,126,128,131,],[-7,17,17,-8,-39,-45,-50,-62,-61,-66,-67,-62,-58,-62,-59,-63,-64,-65,97,99,-38,-34,-55,-63,-63,-60,-32,-44,-44,-44,-49,-49,-54,-54,-56,-57,-35,-40,-41,-42,-46,-47,-51,-52,-38,-33,]),'LBRACE':([7,11,29,41,84,119,129,],[14,14,-29,14,14,-26,14,]),'END':([13,18,37,],[19,36,-13,]),'IF':([14,20,21,22,23,24,25,26,38,113,115,117,118,133,134,],[28,28,-11,-14,-15,-16,-17,-18,-12,-30,-31,-19,-23,-27,-24,]),'DO':([14,20,21,22,23,24,25,26,38,113,115,117,118,133,134,],[29,29,-11,-14,-15,-16,-17,-18,-12,-30,-31,-19,-23,-27,-24,]),'PRINT':([14,20,21,22,23,24,25,26,38,113,115,117,118,133,134,],[30,30,-11,-14,-15,-16,-17,-18,-12,-30,-31,-19,-23,-27,-24,]),'RBRACE':([14,20,21,22,23,24,25,26,38,113,115,117,118,133,134,],[-68,37,-11,-14,-15,-16,-17,-18,-12,-30,-31,-19,-23,-27,-24,]),'INT':([16,31,],[33,33,]),'FLOAT':([16,31,],[34,34,]),'EQUAL':([27,39,],[-20,45,]),'LPAREN':([28,30,40,42,45,46,58,60,63,64,65,66,67,68,69,77,85,86,87,88,89,90,91,95,97,114,],[40,-36,46,58,-21,46,46,46,-43,-43,-43,-48,-48,-53,-53,95,46,46,46,46,46,46,46,46,-37,46,]),'WHILE':([37,57,],[-13,77,]),'ELSE':([37,102,],[-13,119,]),'PLUS':([40,45,46,48,49,52,53,54,55,56,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,85,86,87,88,89,90,91,92,93,94,95,97,103,104,105,106,107,108,109,110,111,114,123,124,125,126,],[50,-21,50,66,-45,-50,-62,-61,-66,-67,50,50,-43,-43,-43,-48,-48,-53,-53,-62,-58,-62,-59,-63,-64,-65,-55,50,50,50,50,50,50,50,-63,-63,-60,50,-37,66,66,66,-49,-49,-54,-54,-56,-57,50,-46,-47,-51,-52,]),'MINUS':([40,45,46,48,49,52,53,54,55,56,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,85,86,87,88,89,90,91,92,93,94,95,97,103,104,105,106,107,108,109,110,111,114,123,124,125,126,],[51,-21,51,67,-45,-50,-62,-61,-66,-67,51,51,-43,-43,-43,-48,-48,-53,-53,-62,-58,-62,-59,-63,-64,-65,-55,51,51,51,51,51,51,51,-63,-63,-60,51,-37,67,67,67,-49,-49,-54,-54,-56,-57,51,-46,-47,-51,-52,]),'CTE_INT':([40,45,46,50,51,58,60,63,64,65,66,67,68,69,85,86,87,88,89,90,91,95,97,114,],[55,-21,55,55,55,55,55,-43,-43,-43,-48,-48,-53,-53,55,55,55,55,55,55,55,55,-37,55,]),'CTE_FLOAT':([40,45,46,50,51,58,60,63,64,65,66,67,68,69,85,86,87,88,89,90,91,95,97,114,],[56,-21,56,56,56,56,56,-43,-43,-43,-48,-48,-53,-53,56,56,56,56,56,56,56,56,-37,56,]),'RPAREN':([47,48,49,52,53,54,55,56,61,62,70,71,72,73,74,75,76,78,79,80,81,83,92,93,94,100,103,104,105,106,107,108,109,110,111,112,116,120,121,122,123,124,125,126,127,128,131,],[-25,-39,-45,-50,-62,-61,-66,-67,83,84,-62,-58,-62,-59,-63,-64,-65,96,98,-38,-34,-55,-63,-63,-60,-32,-44,-44,-44,-49,-49,-54,-54,-56,-57,-28,-35,-40,-41,-42,-46,-47,-51,-52,130,-38,-33,]),'GT':([48,49,52,53,54,55,56,70,71,72,73,74,75,76,83,92,93,94,106,107,108,109,110,111,123,124,125,126,],[63,-45,-50,-62,-61,-66,-67,-62,-58,-62,-59,-63,-64,-65,-55,-63,-63,-60,-49,-49,-54,-54,-56,-57,-46,-47,-51,-52,]),'LT':([48,49,52,53,54,55,56,70,71,72,73,74,75,76,83,92,93,94,106,107,108,109,110,111,123,124,125,126,],[64,-45,-50,-62,-61,-66,-67,-62,-58,-62,-59,-63,-64,-65,-55,-63,-63,-60,-49,-49,-54,-54,-56,-57,-46,-47,-51,-52,]),'NE':([48,49,52,53,54,55,56,70,71,72,73,74,75,76,83,92,93,94,106,107,108,109,110,111,123,124,125,126,],[65,-45,-50,-62,-61,-66,-67,-62,-58,-62,-59,-63,-64,-65,-55,-63,-63,-60,-49,-49,-54,-54,-56,-57,-46,-47,-51,-52,]),'TIMES':([49,52,53,54,55,56,70,71,72,73,74,75,76,83,92,93,94,106,107,108,109,110,111,125,126,],[68,-50,-62,-61,-66,-67,-62,-58,-62,-59,-63,-64,-65,-55,-63,-63,-60,68,68,-54,-54,-56,-57,-51,-52,]),'DIVIDE':([49,52,53,54,55,56,70,71,72,73,74,75,76,83,92,93,94,106,107,108,109,110,111,125,126,],[69,-50,-62,-61,-66,-67,-62,-58,-62,-59,-63,-64,-65,-55,-63,-63,-60,69,69,-54,-54,-56,-57,-51,-52,]),'CTE_STRING':([58,99,],[81,116,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'return_vars':([4,],[6,]),'vars':([4,6,],[8,12,]),'list_vars':([4,6,9,],[10,10,15,]),'body':([7,11,41,84,129,],[13,18,57,102,132,]),'return_statement':([14,],[20,]),'statement':([14,20,],[21,38,]),'assign':([14,20,],[22,22,]),'condition':([14,20,],[23,23,]),'cycle':([14,20,],[24,24,]),'print':([14,20,],[25,25,]),'empty':([14,20,],[26,26,]),'type':([16,31,],[32,43,]),'seen_assign_ID':([27,],[39,]),'seen_start_cycle':([29,],[41,]),'seen_print_PRINT':([30,],[42,]),'expression':([40,46,58,60,95,114,],[47,61,80,82,112,128,]),'exp':([40,46,58,60,85,86,87,95,114,],[48,48,48,48,103,104,105,48,48,]),'term':([40,46,58,60,85,86,87,88,89,95,114,],[49,49,49,49,49,49,49,106,107,49,49,]),'factor':([40,46,58,60,85,86,87,88,89,90,91,95,114,],[52,52,52,52,52,52,52,52,52,108,109,52,52,]),'cte':([40,46,50,51,58,60,85,86,87,88,89,90,91,95,114,],[54,54,71,73,54,54,54,54,54,54,54,54,54,54,54,]),'seen_term_EQUAL':([45,],[60,]),'seen_condition_IF':([47,],[62,]),'seen_factor_ID':([53,70,72,],[74,92,93,]),'seen_INT':([55,],[75,]),'seen_FLOAT':([56,],[76,]),'list_print_expression':([58,],[78,]),'list_print_cte':([58,],[79,]),'seen_exp_GT_LT_NE':([63,64,65,],[85,86,87,]),'seen_exp_PLUS_MINUS':([66,67,],[88,89,]),'seen_term_TIMES_DIVIDE':([68,69,],[90,91,]),'verify_declaration':([74,92,93,],[94,110,111,]),'seen_print_quad_PRINT':([80,128,],[100,131,]),'seen_exp_quad_E':([82,],[101,]),'seen_print_PARINT_COMMA':([97,],[114,]),'seen_exp_quad_G_L_N':([103,104,105,],[120,121,122,]),'seen_exp_quad_P_M':([106,107,],[123,124,]),'seen_exp_quad_T_D':([108,109,],[125,126,]),'seen_cycle':([112,],[127,]),'seen_condition_else':([119,],[129,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON return_vars MAIN body END','program',7,'p_program','parser.py',14),
  ('program -> PROGRAM ID SEMICOLON MAIN body END','program',6,'p_program','parser.py',15),
  ('return_vars -> vars','return_vars',1,'p_return_vars','parser.py',26),
  ('return_vars -> return_vars vars','return_vars',2,'p_return_vars','parser.py',27),
  ('vars -> VAR list_vars COLON type SEMICOLON','vars',5,'p_vars','parser.py',38),
  ('vars -> list_vars COLON type SEMICOLON','vars',4,'p_vars','parser.py',39),
  ('list_vars -> ID','list_vars',1,'p_list_vars','parser.py',54),
  ('list_vars -> list_vars COMMA ID','list_vars',3,'p_list_vars','parser.py',55),
  ('type -> INT','type',1,'p_type','parser.py',66),
  ('type -> FLOAT','type',1,'p_type','parser.py',67),
  ('return_statement -> statement','return_statement',1,'p_return_statement','parser.py',73),
  ('return_statement -> return_statement statement','return_statement',2,'p_return_statement','parser.py',74),
  ('body -> LBRACE return_statement RBRACE','body',3,'p_body','parser.py',85),
  ('statement -> assign','statement',1,'p_statement','parser.py',93),
  ('statement -> condition','statement',1,'p_statement','parser.py',94),
  ('statement -> cycle','statement',1,'p_statement','parser.py',95),
  ('statement -> print','statement',1,'p_statement','parser.py',96),
  ('statement -> empty','statement',1,'p_statement','parser.py',97),
  ('assign -> ID seen_assign_ID EQUAL seen_term_EQUAL expression seen_exp_quad_E SEMICOLON','assign',7,'p_assign','parser.py',104),
  ('seen_assign_ID -> <empty>','seen_assign_ID',0,'p_seen_assign_ID','parser.py',114),
  ('seen_term_EQUAL -> <empty>','seen_term_EQUAL',0,'p_seen_term_EQUAL','parser.py',122),
  ('seen_exp_quad_E -> <empty>','seen_exp_quad_E',0,'p_seen_exp_quad_E','parser.py',130),
  ('condition -> IF LPAREN expression seen_condition_IF RPAREN body SEMICOLON','condition',7,'p_condition','parser.py',150),
  ('condition -> IF LPAREN expression seen_condition_IF RPAREN body ELSE seen_condition_else body SEMICOLON','condition',10,'p_condition','parser.py',151),
  ('seen_condition_IF -> <empty>','seen_condition_IF',0,'p_seen_condition_IF','parser.py',167),
  ('seen_condition_else -> <empty>','seen_condition_else',0,'p_seen_condition_else','parser.py',181),
  ('cycle -> DO seen_start_cycle body WHILE LPAREN expression seen_cycle RPAREN SEMICOLON','cycle',9,'p_cycle','parser.py',192),
  ('seen_cycle -> <empty>','seen_cycle',0,'p_seen_cycle','parser.py',200),
  ('seen_start_cycle -> <empty>','seen_start_cycle',0,'p_seen_start_cycle','parser.py',215),
  ('print -> PRINT seen_print_PRINT LPAREN list_print_expression RPAREN SEMICOLON','print',6,'p_print','parser.py',222),
  ('print -> PRINT seen_print_PRINT LPAREN list_print_cte RPAREN SEMICOLON','print',6,'p_print','parser.py',223),
  ('list_print_expression -> expression seen_print_quad_PRINT','list_print_expression',2,'p_list_print_expression','parser.py',229),
  ('list_print_expression -> list_print_expression COMMA seen_print_PARINT_COMMA expression seen_print_quad_PRINT','list_print_expression',5,'p_list_print_expression','parser.py',230),
  ('list_print_cte -> CTE_STRING','list_print_cte',1,'p_list_print_cte','parser.py',241),
  ('list_print_cte -> list_print_cte COMMA CTE_STRING','list_print_cte',3,'p_list_print_cte','parser.py',242),
  ('seen_print_PRINT -> <empty>','seen_print_PRINT',0,'p_seen_print_PRINT','parser.py',254),
  ('seen_print_PARINT_COMMA -> <empty>','seen_print_PARINT_COMMA',0,'p_seen_print_PARINT_COMMA','parser.py',262),
  ('seen_print_quad_PRINT -> <empty>','seen_print_quad_PRINT',0,'p_seen_print_quad_PRINT','parser.py',270),
  ('expression -> exp','expression',1,'p_expression','parser.py',281),
  ('expression -> exp GT seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N','expression',5,'p_expression','parser.py',282),
  ('expression -> exp LT seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N','expression',5,'p_expression','parser.py',283),
  ('expression -> exp NE seen_exp_GT_LT_NE exp seen_exp_quad_G_L_N','expression',5,'p_expression','parser.py',284),
  ('seen_exp_GT_LT_NE -> <empty>','seen_exp_GT_LT_NE',0,'p_seen_exp_GT_LT_NE','parser.py',295),
  ('seen_exp_quad_G_L_N -> <empty>','seen_exp_quad_G_L_N',0,'p_seen_exp_quad_G_L_N','parser.py',303),
  ('exp -> term','exp',1,'p_exp','parser.py',327),
  ('exp -> exp PLUS seen_exp_PLUS_MINUS term seen_exp_quad_P_M','exp',5,'p_exp','parser.py',328),
  ('exp -> exp MINUS seen_exp_PLUS_MINUS term seen_exp_quad_P_M','exp',5,'p_exp','parser.py',329),
  ('seen_exp_PLUS_MINUS -> <empty>','seen_exp_PLUS_MINUS',0,'p_seen_exp_PLUS_MINUS','parser.py',344),
  ('seen_exp_quad_P_M -> <empty>','seen_exp_quad_P_M',0,'p_seen_exp_quad_P_M','parser.py',352),
  ('term -> factor','term',1,'p_term','parser.py',375),
  ('term -> term TIMES seen_term_TIMES_DIVIDE factor seen_exp_quad_T_D','term',5,'p_term','parser.py',376),
  ('term -> term DIVIDE seen_term_TIMES_DIVIDE factor seen_exp_quad_T_D','term',5,'p_term','parser.py',377),
  ('seen_term_TIMES_DIVIDE -> <empty>','seen_term_TIMES_DIVIDE',0,'p_seen_term_TIMES_DIVIDE','parser.py',392),
  ('seen_exp_quad_T_D -> <empty>','seen_exp_quad_T_D',0,'p_seen_exp_quad_T_D','parser.py',400),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',421),
  ('factor -> PLUS ID seen_factor_ID verify_declaration','factor',4,'p_factor','parser.py',422),
  ('factor -> MINUS ID seen_factor_ID verify_declaration','factor',4,'p_factor','parser.py',423),
  ('factor -> PLUS cte','factor',2,'p_factor','parser.py',424),
  ('factor -> MINUS cte','factor',2,'p_factor','parser.py',425),
  ('factor -> ID seen_factor_ID verify_declaration','factor',3,'p_factor','parser.py',426),
  ('factor -> cte','factor',1,'p_factor','parser.py',427),
  ('seen_factor_ID -> <empty>','seen_factor_ID',0,'p_seen_factor_ID','parser.py',439),
  ('verify_declaration -> <empty>','verify_declaration',0,'p_verify_declaration','parser.py',447),
  ('cte -> CTE_INT seen_INT','cte',2,'p_cte','parser.py',453),
  ('cte -> CTE_FLOAT seen_FLOAT','cte',2,'p_cte','parser.py',454),
  ('seen_INT -> <empty>','seen_INT',0,'p_seen_INT','parser.py',462),
  ('seen_FLOAT -> <empty>','seen_FLOAT',0,'p_seen_FLOAT','parser.py',469),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',475),
]
