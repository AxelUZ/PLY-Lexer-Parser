Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars funcs MAIN body END
Rule 2     vars -> VAR ID COLON type SEMICOLON
Rule 3     vars -> VAR ID COLON type SEMICOLON vars
Rule 4     type -> INT
Rule 5     type -> FLOAT
Rule 6     body -> LBRACE statement RBRACE
Rule 7     function_params -> ID COLON type
Rule 8     function_params -> function_params COMMA ID COLON type
Rule 9     funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
Rule 10    funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
Rule 11    funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
Rule 12    funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
Rule 13    statement -> assign
Rule 14    statement -> condition
Rule 15    statement -> cycle
Rule 16    statement -> f_call
Rule 17    statement -> print
Rule 18    assign -> ID EQUAL expression SEMICOLON
Rule 19    condition -> IF LPAREN expression RPAREN body
Rule 20    condition -> IF LPAREN expression RPAREN body ELSE body
Rule 21    cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON
Rule 22    f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON
Rule 23    optional_arguments -> expression
Rule 24    optional_arguments -> optional_arguments COMMA expression
Rule 25    print -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 26    print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON
Rule 27    expression -> exp
Rule 28    expression -> exp GT exp
Rule 29    expression -> exp LT exp
Rule 30    expression -> exp NE exp
Rule 31    exp -> term
Rule 32    exp -> exp PLUS term
Rule 33    exp -> exp MINUS term
Rule 34    term -> factor
Rule 35    term -> term TIMES factor
Rule 36    term -> term DIVIDE factor
Rule 37    factor -> LPAREN expression RPAREN
Rule 38    factor -> PLUS ID
Rule 39    factor -> MINUS ID
Rule 40    factor -> PLUS cte
Rule 41    factor -> MINUS cte
Rule 42    factor -> ID
Rule 43    factor -> cte
Rule 44    cte -> CTE_INT
Rule 45    cte -> CTE_FLOAT
Rule 46    empty -> <empty>

Terminals, with rules where they appear

COLON                : 2 3 7 8
COMMA                : 8 24
CTE_FLOAT            : 45
CTE_INT              : 44
CTE_STRING           : 26
DIVIDE               : 36
DO                   : 21
ELSE                 : 20
END                  : 1
EQUAL                : 18
FLOAT                : 5
GT                   : 28
ID                   : 1 2 3 7 8 9 10 11 12 18 22 38 39 42
IF                   : 19 20
INT                  : 4
LBRACE               : 6
LBRACKET             : 9 10 11 12
LPAREN               : 9 10 11 12 19 20 21 22 25 26 37
LT                   : 29
MAIN                 : 1
MINUS                : 33 39 41
NE                   : 30
PLUS                 : 32 38 40
PRINT                : 25 26
PROGRAM              : 1
RBRACE               : 6
RBRACKET             : 9 10 11 12
RPAREN               : 9 10 11 12 19 20 21 22 25 26 37
SEMICOLON            : 1 2 3 9 10 11 12 18 21 22 25 26
TIMES                : 35
VAR                  : 2 3
VOID                 : 9 10 11 12
WHILE                : 21
error                : 

Nonterminals, with rules where they appear

assign               : 13
body                 : 1 9 10 11 12 19 20 20 21
condition            : 14
cte                  : 40 41 43
cycle                : 15
empty                : 
exp                  : 27 28 28 29 29 30 30 32 33
expression           : 18 19 20 21 23 24 25 37
f_call               : 16
factor               : 34 35 36
funcs                : 1 10 12
function_params      : 8 9 10
optional_arguments   : 22 24
print                : 17
program              : 0
statement            : 6
term                 : 31 32 33 35 36
type                 : 2 3 7 8
vars                 : 1 3 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars funcs MAIN body END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars funcs MAIN body END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars funcs MAIN body END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars funcs MAIN body END
    (2) vars -> . VAR ID COLON type SEMICOLON
    (3) vars -> . VAR ID COLON type SEMICOLON vars

    VAR             shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . funcs MAIN body END
    (9) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs

    VOID            shift and go to state 8

    funcs                          shift and go to state 7

state 6

    (2) vars -> VAR . ID COLON type SEMICOLON
    (3) vars -> VAR . ID COLON type SEMICOLON vars

    ID              shift and go to state 9


state 7

    (1) program -> PROGRAM ID SEMICOLON vars funcs . MAIN body END

    MAIN            shift and go to state 10


state 8

    (9) funcs -> VOID . ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID . ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> VOID . ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> VOID . ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs

    ID              shift and go to state 11


state 9

    (2) vars -> VAR ID . COLON type SEMICOLON
    (3) vars -> VAR ID . COLON type SEMICOLON vars

    COLON           shift and go to state 12


state 10

    (1) program -> PROGRAM ID SEMICOLON vars funcs MAIN . body END
    (6) body -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 13

state 11

    (9) funcs -> VOID ID . LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID . LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> VOID ID . LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> VOID ID . LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs

    LPAREN          shift and go to state 15


state 12

    (2) vars -> VAR ID COLON . type SEMICOLON
    (3) vars -> VAR ID COLON . type SEMICOLON vars
    (4) type -> . INT
    (5) type -> . FLOAT

    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    type                           shift and go to state 16

state 13

    (1) program -> PROGRAM ID SEMICOLON vars funcs MAIN body . END

    END             shift and go to state 19


state 14

    (6) body -> LBRACE . statement RBRACE
    (13) statement -> . assign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . f_call
    (17) statement -> . print
    (18) assign -> . ID EQUAL expression SEMICOLON
    (19) condition -> . IF LPAREN expression RPAREN body
    (20) condition -> . IF LPAREN expression RPAREN body ELSE body
    (21) cycle -> . DO body WHILE LPAREN expression RPAREN SEMICOLON
    (22) f_call -> . ID LPAREN optional_arguments RPAREN SEMICOLON
    (25) print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) print -> . PRINT LPAREN CTE_STRING RPAREN SEMICOLON

    ID              shift and go to state 26
    IF              shift and go to state 27
    DO              shift and go to state 28
    PRINT           shift and go to state 29

    statement                      shift and go to state 20
    assign                         shift and go to state 21
    condition                      shift and go to state 22
    cycle                          shift and go to state 23
    f_call                         shift and go to state 24
    print                          shift and go to state 25

state 15

    (9) funcs -> VOID ID LPAREN . function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN . function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> VOID ID LPAREN . RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN . RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (7) function_params -> . ID COLON type
    (8) function_params -> . function_params COMMA ID COLON type

    RPAREN          shift and go to state 32
    ID              shift and go to state 30

    function_params                shift and go to state 31

state 16

    (2) vars -> VAR ID COLON type . SEMICOLON
    (3) vars -> VAR ID COLON type . SEMICOLON vars

    SEMICOLON       shift and go to state 33


state 17

    (4) type -> INT .

    SEMICOLON       reduce using rule 4 (type -> INT .)
    RPAREN          reduce using rule 4 (type -> INT .)
    COMMA           reduce using rule 4 (type -> INT .)


state 18

    (5) type -> FLOAT .

    SEMICOLON       reduce using rule 5 (type -> FLOAT .)
    RPAREN          reduce using rule 5 (type -> FLOAT .)
    COMMA           reduce using rule 5 (type -> FLOAT .)


state 19

    (1) program -> PROGRAM ID SEMICOLON vars funcs MAIN body END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars funcs MAIN body END .)


state 20

    (6) body -> LBRACE statement . RBRACE

    RBRACE          shift and go to state 34


state 21

    (13) statement -> assign .

    RBRACE          reduce using rule 13 (statement -> assign .)


state 22

    (14) statement -> condition .

    RBRACE          reduce using rule 14 (statement -> condition .)


state 23

    (15) statement -> cycle .

    RBRACE          reduce using rule 15 (statement -> cycle .)


state 24

    (16) statement -> f_call .

    RBRACE          reduce using rule 16 (statement -> f_call .)


state 25

    (17) statement -> print .

    RBRACE          reduce using rule 17 (statement -> print .)


state 26

    (18) assign -> ID . EQUAL expression SEMICOLON
    (22) f_call -> ID . LPAREN optional_arguments RPAREN SEMICOLON

    EQUAL           shift and go to state 35
    LPAREN          shift and go to state 36


state 27

    (19) condition -> IF . LPAREN expression RPAREN body
    (20) condition -> IF . LPAREN expression RPAREN body ELSE body

    LPAREN          shift and go to state 37


state 28

    (21) cycle -> DO . body WHILE LPAREN expression RPAREN SEMICOLON
    (6) body -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 38

state 29

    (25) print -> PRINT . LPAREN expression RPAREN SEMICOLON
    (26) print -> PRINT . LPAREN CTE_STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 39


state 30

    (7) function_params -> ID . COLON type

    COLON           shift and go to state 40


state 31

    (9) funcs -> VOID ID LPAREN function_params . RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params . RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (8) function_params -> function_params . COMMA ID COLON type

    RPAREN          shift and go to state 41
    COMMA           shift and go to state 42


state 32

    (11) funcs -> VOID ID LPAREN RPAREN . LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN . LBRACKET vars body RBRACKET SEMICOLON funcs

    LBRACKET        shift and go to state 43


state 33

    (2) vars -> VAR ID COLON type SEMICOLON .
    (3) vars -> VAR ID COLON type SEMICOLON . vars
    (2) vars -> . VAR ID COLON type SEMICOLON
    (3) vars -> . VAR ID COLON type SEMICOLON vars

    VOID            reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON .)
    LBRACE          reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON .)
    VAR             shift and go to state 6

    vars                           shift and go to state 44

state 34

    (6) body -> LBRACE statement RBRACE .

    END             reduce using rule 6 (body -> LBRACE statement RBRACE .)
    WHILE           reduce using rule 6 (body -> LBRACE statement RBRACE .)
    RBRACKET        reduce using rule 6 (body -> LBRACE statement RBRACE .)
    ELSE            reduce using rule 6 (body -> LBRACE statement RBRACE .)
    RBRACE          reduce using rule 6 (body -> LBRACE statement RBRACE .)


state 35

    (18) assign -> ID EQUAL . expression SEMICOLON
    (27) expression -> . exp
    (28) expression -> . exp GT exp
    (29) expression -> . exp LT exp
    (30) expression -> . exp NE exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 46
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 36

    (22) f_call -> ID LPAREN . optional_arguments RPAREN SEMICOLON
    (23) optional_arguments -> . expression
    (24) optional_arguments -> . optional_arguments COMMA expression
    (27) expression -> . exp
    (28) expression -> . exp GT exp
    (29) expression -> . exp LT exp
    (30) expression -> . exp NE exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    optional_arguments             shift and go to state 56
    expression                     shift and go to state 57
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 37

    (19) condition -> IF LPAREN . expression RPAREN body
    (20) condition -> IF LPAREN . expression RPAREN body ELSE body
    (27) expression -> . exp
    (28) expression -> . exp GT exp
    (29) expression -> . exp LT exp
    (30) expression -> . exp NE exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 58
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 38

    (21) cycle -> DO body . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 59


state 39

    (25) print -> PRINT LPAREN . expression RPAREN SEMICOLON
    (26) print -> PRINT LPAREN . CTE_STRING RPAREN SEMICOLON
    (27) expression -> . exp
    (28) expression -> . exp GT exp
    (29) expression -> . exp LT exp
    (30) expression -> . exp NE exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 61
    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 60
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 40

    (7) function_params -> ID COLON . type
    (4) type -> . INT
    (5) type -> . FLOAT

    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    type                           shift and go to state 62

state 41

    (9) funcs -> VOID ID LPAREN function_params RPAREN . LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN . LBRACKET vars body RBRACKET SEMICOLON funcs

    LBRACKET        shift and go to state 63


state 42

    (8) function_params -> function_params COMMA . ID COLON type

    ID              shift and go to state 64


state 43

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET . vars body RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET . vars body RBRACKET SEMICOLON funcs
    (2) vars -> . VAR ID COLON type SEMICOLON
    (3) vars -> . VAR ID COLON type SEMICOLON vars

    VAR             shift and go to state 6

    vars                           shift and go to state 65

state 44

    (3) vars -> VAR ID COLON type SEMICOLON vars .

    VOID            reduce using rule 3 (vars -> VAR ID COLON type SEMICOLON vars .)
    LBRACE          reduce using rule 3 (vars -> VAR ID COLON type SEMICOLON vars .)


state 45

    (42) factor -> ID .

    TIMES           reduce using rule 42 (factor -> ID .)
    DIVIDE          reduce using rule 42 (factor -> ID .)
    GT              reduce using rule 42 (factor -> ID .)
    LT              reduce using rule 42 (factor -> ID .)
    NE              reduce using rule 42 (factor -> ID .)
    PLUS            reduce using rule 42 (factor -> ID .)
    MINUS           reduce using rule 42 (factor -> ID .)
    SEMICOLON       reduce using rule 42 (factor -> ID .)
    RPAREN          reduce using rule 42 (factor -> ID .)
    COMMA           reduce using rule 42 (factor -> ID .)


state 46

    (18) assign -> ID EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 66


state 47

    (27) expression -> exp .
    (28) expression -> exp . GT exp
    (29) expression -> exp . LT exp
    (30) expression -> exp . NE exp
    (32) exp -> exp . PLUS term
    (33) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 27 (expression -> exp .)
    RPAREN          reduce using rule 27 (expression -> exp .)
    COMMA           reduce using rule 27 (expression -> exp .)
    GT              shift and go to state 67
    LT              shift and go to state 68
    NE              shift and go to state 69
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 48

    (31) exp -> term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    GT              reduce using rule 31 (exp -> term .)
    LT              reduce using rule 31 (exp -> term .)
    NE              reduce using rule 31 (exp -> term .)
    PLUS            reduce using rule 31 (exp -> term .)
    MINUS           reduce using rule 31 (exp -> term .)
    SEMICOLON       reduce using rule 31 (exp -> term .)
    RPAREN          reduce using rule 31 (exp -> term .)
    COMMA           reduce using rule 31 (exp -> term .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73


state 49

    (38) factor -> PLUS . ID
    (40) factor -> PLUS . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    ID              shift and go to state 74
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    cte                            shift and go to state 75

state 50

    (39) factor -> MINUS . ID
    (41) factor -> MINUS . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    ID              shift and go to state 76
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    cte                            shift and go to state 77

state 51

    (34) term -> factor .

    TIMES           reduce using rule 34 (term -> factor .)
    DIVIDE          reduce using rule 34 (term -> factor .)
    GT              reduce using rule 34 (term -> factor .)
    LT              reduce using rule 34 (term -> factor .)
    NE              reduce using rule 34 (term -> factor .)
    PLUS            reduce using rule 34 (term -> factor .)
    MINUS           reduce using rule 34 (term -> factor .)
    SEMICOLON       reduce using rule 34 (term -> factor .)
    RPAREN          reduce using rule 34 (term -> factor .)
    COMMA           reduce using rule 34 (term -> factor .)


state 52

    (37) factor -> LPAREN . expression RPAREN
    (27) expression -> . exp
    (28) expression -> . exp GT exp
    (29) expression -> . exp LT exp
    (30) expression -> . exp NE exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 78
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 53

    (43) factor -> cte .

    TIMES           reduce using rule 43 (factor -> cte .)
    DIVIDE          reduce using rule 43 (factor -> cte .)
    GT              reduce using rule 43 (factor -> cte .)
    LT              reduce using rule 43 (factor -> cte .)
    NE              reduce using rule 43 (factor -> cte .)
    PLUS            reduce using rule 43 (factor -> cte .)
    MINUS           reduce using rule 43 (factor -> cte .)
    SEMICOLON       reduce using rule 43 (factor -> cte .)
    RPAREN          reduce using rule 43 (factor -> cte .)
    COMMA           reduce using rule 43 (factor -> cte .)


state 54

    (44) cte -> CTE_INT .

    TIMES           reduce using rule 44 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 44 (cte -> CTE_INT .)
    GT              reduce using rule 44 (cte -> CTE_INT .)
    LT              reduce using rule 44 (cte -> CTE_INT .)
    NE              reduce using rule 44 (cte -> CTE_INT .)
    PLUS            reduce using rule 44 (cte -> CTE_INT .)
    MINUS           reduce using rule 44 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 44 (cte -> CTE_INT .)
    RPAREN          reduce using rule 44 (cte -> CTE_INT .)
    COMMA           reduce using rule 44 (cte -> CTE_INT .)


state 55

    (45) cte -> CTE_FLOAT .

    TIMES           reduce using rule 45 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 45 (cte -> CTE_FLOAT .)
    GT              reduce using rule 45 (cte -> CTE_FLOAT .)
    LT              reduce using rule 45 (cte -> CTE_FLOAT .)
    NE              reduce using rule 45 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 45 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 45 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 45 (cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 45 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 45 (cte -> CTE_FLOAT .)


state 56

    (22) f_call -> ID LPAREN optional_arguments . RPAREN SEMICOLON
    (24) optional_arguments -> optional_arguments . COMMA expression

    RPAREN          shift and go to state 79
    COMMA           shift and go to state 80


state 57

    (23) optional_arguments -> expression .

    RPAREN          reduce using rule 23 (optional_arguments -> expression .)
    COMMA           reduce using rule 23 (optional_arguments -> expression .)


state 58

    (19) condition -> IF LPAREN expression . RPAREN body
    (20) condition -> IF LPAREN expression . RPAREN body ELSE body

    RPAREN          shift and go to state 81


state 59

    (21) cycle -> DO body WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 82


state 60

    (25) print -> PRINT LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 83


state 61

    (26) print -> PRINT LPAREN CTE_STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 84


state 62

    (7) function_params -> ID COLON type .

    RPAREN          reduce using rule 7 (function_params -> ID COLON type .)
    COMMA           reduce using rule 7 (function_params -> ID COLON type .)


state 63

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET . vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET . vars body RBRACKET SEMICOLON funcs
    (2) vars -> . VAR ID COLON type SEMICOLON
    (3) vars -> . VAR ID COLON type SEMICOLON vars

    VAR             shift and go to state 6

    vars                           shift and go to state 85

state 64

    (8) function_params -> function_params COMMA ID . COLON type

    COLON           shift and go to state 86


state 65

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET vars . body RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars . body RBRACKET SEMICOLON funcs
    (6) body -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 87

state 66

    (18) assign -> ID EQUAL expression SEMICOLON .

    RBRACE          reduce using rule 18 (assign -> ID EQUAL expression SEMICOLON .)


state 67

    (28) expression -> exp GT . exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    exp                            shift and go to state 88
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 68

    (29) expression -> exp LT . exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    exp                            shift and go to state 89
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 69

    (30) expression -> exp NE . exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    exp                            shift and go to state 90
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 70

    (32) exp -> exp PLUS . term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    term                           shift and go to state 91
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 71

    (33) exp -> exp MINUS . term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    term                           shift and go to state 92
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 72

    (35) term -> term TIMES . factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    factor                         shift and go to state 93
    cte                            shift and go to state 53

state 73

    (36) term -> term DIVIDE . factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    factor                         shift and go to state 94
    cte                            shift and go to state 53

state 74

    (38) factor -> PLUS ID .

    TIMES           reduce using rule 38 (factor -> PLUS ID .)
    DIVIDE          reduce using rule 38 (factor -> PLUS ID .)
    GT              reduce using rule 38 (factor -> PLUS ID .)
    LT              reduce using rule 38 (factor -> PLUS ID .)
    NE              reduce using rule 38 (factor -> PLUS ID .)
    PLUS            reduce using rule 38 (factor -> PLUS ID .)
    MINUS           reduce using rule 38 (factor -> PLUS ID .)
    SEMICOLON       reduce using rule 38 (factor -> PLUS ID .)
    RPAREN          reduce using rule 38 (factor -> PLUS ID .)
    COMMA           reduce using rule 38 (factor -> PLUS ID .)


state 75

    (40) factor -> PLUS cte .

    TIMES           reduce using rule 40 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 40 (factor -> PLUS cte .)
    GT              reduce using rule 40 (factor -> PLUS cte .)
    LT              reduce using rule 40 (factor -> PLUS cte .)
    NE              reduce using rule 40 (factor -> PLUS cte .)
    PLUS            reduce using rule 40 (factor -> PLUS cte .)
    MINUS           reduce using rule 40 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 40 (factor -> PLUS cte .)
    RPAREN          reduce using rule 40 (factor -> PLUS cte .)
    COMMA           reduce using rule 40 (factor -> PLUS cte .)


state 76

    (39) factor -> MINUS ID .

    TIMES           reduce using rule 39 (factor -> MINUS ID .)
    DIVIDE          reduce using rule 39 (factor -> MINUS ID .)
    GT              reduce using rule 39 (factor -> MINUS ID .)
    LT              reduce using rule 39 (factor -> MINUS ID .)
    NE              reduce using rule 39 (factor -> MINUS ID .)
    PLUS            reduce using rule 39 (factor -> MINUS ID .)
    MINUS           reduce using rule 39 (factor -> MINUS ID .)
    SEMICOLON       reduce using rule 39 (factor -> MINUS ID .)
    RPAREN          reduce using rule 39 (factor -> MINUS ID .)
    COMMA           reduce using rule 39 (factor -> MINUS ID .)


state 77

    (41) factor -> MINUS cte .

    TIMES           reduce using rule 41 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 41 (factor -> MINUS cte .)
    GT              reduce using rule 41 (factor -> MINUS cte .)
    LT              reduce using rule 41 (factor -> MINUS cte .)
    NE              reduce using rule 41 (factor -> MINUS cte .)
    PLUS            reduce using rule 41 (factor -> MINUS cte .)
    MINUS           reduce using rule 41 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 41 (factor -> MINUS cte .)
    RPAREN          reduce using rule 41 (factor -> MINUS cte .)
    COMMA           reduce using rule 41 (factor -> MINUS cte .)


state 78

    (37) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 95


state 79

    (22) f_call -> ID LPAREN optional_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 96


state 80

    (24) optional_arguments -> optional_arguments COMMA . expression
    (27) expression -> . exp
    (28) expression -> . exp GT exp
    (29) expression -> . exp LT exp
    (30) expression -> . exp NE exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 97
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 81

    (19) condition -> IF LPAREN expression RPAREN . body
    (20) condition -> IF LPAREN expression RPAREN . body ELSE body
    (6) body -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 98

state 82

    (21) cycle -> DO body WHILE LPAREN . expression RPAREN SEMICOLON
    (27) expression -> . exp
    (28) expression -> . exp GT exp
    (29) expression -> . exp LT exp
    (30) expression -> . exp NE exp
    (31) exp -> . term
    (32) exp -> . exp PLUS term
    (33) exp -> . exp MINUS term
    (34) term -> . factor
    (35) term -> . term TIMES factor
    (36) term -> . term DIVIDE factor
    (37) factor -> . LPAREN expression RPAREN
    (38) factor -> . PLUS ID
    (39) factor -> . MINUS ID
    (40) factor -> . PLUS cte
    (41) factor -> . MINUS cte
    (42) factor -> . ID
    (43) factor -> . cte
    (44) cte -> . CTE_INT
    (45) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 99
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 83

    (25) print -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 100


state 84

    (26) print -> PRINT LPAREN CTE_STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 101


state 85

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars . body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars . body RBRACKET SEMICOLON funcs
    (6) body -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 102

state 86

    (8) function_params -> function_params COMMA ID COLON . type
    (4) type -> . INT
    (5) type -> . FLOAT

    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    type                           shift and go to state 103

state 87

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body . RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body . RBRACKET SEMICOLON funcs

    RBRACKET        shift and go to state 104


state 88

    (28) expression -> exp GT exp .
    (32) exp -> exp . PLUS term
    (33) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 28 (expression -> exp GT exp .)
    RPAREN          reduce using rule 28 (expression -> exp GT exp .)
    COMMA           reduce using rule 28 (expression -> exp GT exp .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 89

    (29) expression -> exp LT exp .
    (32) exp -> exp . PLUS term
    (33) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 29 (expression -> exp LT exp .)
    RPAREN          reduce using rule 29 (expression -> exp LT exp .)
    COMMA           reduce using rule 29 (expression -> exp LT exp .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 90

    (30) expression -> exp NE exp .
    (32) exp -> exp . PLUS term
    (33) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 30 (expression -> exp NE exp .)
    RPAREN          reduce using rule 30 (expression -> exp NE exp .)
    COMMA           reduce using rule 30 (expression -> exp NE exp .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 91

    (32) exp -> exp PLUS term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    GT              reduce using rule 32 (exp -> exp PLUS term .)
    LT              reduce using rule 32 (exp -> exp PLUS term .)
    NE              reduce using rule 32 (exp -> exp PLUS term .)
    PLUS            reduce using rule 32 (exp -> exp PLUS term .)
    MINUS           reduce using rule 32 (exp -> exp PLUS term .)
    SEMICOLON       reduce using rule 32 (exp -> exp PLUS term .)
    RPAREN          reduce using rule 32 (exp -> exp PLUS term .)
    COMMA           reduce using rule 32 (exp -> exp PLUS term .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73


state 92

    (33) exp -> exp MINUS term .
    (35) term -> term . TIMES factor
    (36) term -> term . DIVIDE factor

    GT              reduce using rule 33 (exp -> exp MINUS term .)
    LT              reduce using rule 33 (exp -> exp MINUS term .)
    NE              reduce using rule 33 (exp -> exp MINUS term .)
    PLUS            reduce using rule 33 (exp -> exp MINUS term .)
    MINUS           reduce using rule 33 (exp -> exp MINUS term .)
    SEMICOLON       reduce using rule 33 (exp -> exp MINUS term .)
    RPAREN          reduce using rule 33 (exp -> exp MINUS term .)
    COMMA           reduce using rule 33 (exp -> exp MINUS term .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73


state 93

    (35) term -> term TIMES factor .

    TIMES           reduce using rule 35 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 35 (term -> term TIMES factor .)
    GT              reduce using rule 35 (term -> term TIMES factor .)
    LT              reduce using rule 35 (term -> term TIMES factor .)
    NE              reduce using rule 35 (term -> term TIMES factor .)
    PLUS            reduce using rule 35 (term -> term TIMES factor .)
    MINUS           reduce using rule 35 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 35 (term -> term TIMES factor .)
    RPAREN          reduce using rule 35 (term -> term TIMES factor .)
    COMMA           reduce using rule 35 (term -> term TIMES factor .)


state 94

    (36) term -> term DIVIDE factor .

    TIMES           reduce using rule 36 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 36 (term -> term DIVIDE factor .)
    GT              reduce using rule 36 (term -> term DIVIDE factor .)
    LT              reduce using rule 36 (term -> term DIVIDE factor .)
    NE              reduce using rule 36 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 36 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 36 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 36 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 36 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 36 (term -> term DIVIDE factor .)


state 95

    (37) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 37 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 37 (factor -> LPAREN expression RPAREN .)


state 96

    (22) f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON .

    RBRACE          reduce using rule 22 (f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON .)


state 97

    (24) optional_arguments -> optional_arguments COMMA expression .

    RPAREN          reduce using rule 24 (optional_arguments -> optional_arguments COMMA expression .)
    COMMA           reduce using rule 24 (optional_arguments -> optional_arguments COMMA expression .)


state 98

    (19) condition -> IF LPAREN expression RPAREN body .
    (20) condition -> IF LPAREN expression RPAREN body . ELSE body

    RBRACE          reduce using rule 19 (condition -> IF LPAREN expression RPAREN body .)
    ELSE            shift and go to state 105


state 99

    (21) cycle -> DO body WHILE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 106


state 100

    (25) print -> PRINT LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 25 (print -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 101

    (26) print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON .

    RBRACE          reduce using rule 26 (print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON .)


state 102

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body . RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body . RBRACKET SEMICOLON funcs

    RBRACKET        shift and go to state 107


state 103

    (8) function_params -> function_params COMMA ID COLON type .

    RPAREN          reduce using rule 8 (function_params -> function_params COMMA ID COLON type .)
    COMMA           reduce using rule 8 (function_params -> function_params COMMA ID COLON type .)


state 104

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET . SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET . SEMICOLON funcs

    SEMICOLON       shift and go to state 108


state 105

    (20) condition -> IF LPAREN expression RPAREN body ELSE . body
    (6) body -> . LBRACE statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 109

state 106

    (21) cycle -> DO body WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 110


state 107

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET . SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET . SEMICOLON funcs

    SEMICOLON       shift and go to state 111


state 108

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON .
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON . funcs
    (9) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs

    MAIN            reduce using rule 11 (funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON .)
    VOID            shift and go to state 8

    funcs                          shift and go to state 112

state 109

    (20) condition -> IF LPAREN expression RPAREN body ELSE body .

    RBRACE          reduce using rule 20 (condition -> IF LPAREN expression RPAREN body ELSE body .)


state 110

    (21) cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 21 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)


state 111

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON .
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON . funcs
    (9) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs

    MAIN            reduce using rule 9 (funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON .)
    VOID            shift and go to state 8

    funcs                          shift and go to state 113

state 112

    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs .

    MAIN            reduce using rule 12 (funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs .)


state 113

    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs .

    MAIN            reduce using rule 10 (funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs .)

