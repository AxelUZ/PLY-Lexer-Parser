Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars funcs MAIN body END
Rule 2     vars -> VAR ID COLON type SEMICOLON
Rule 3     vars -> VAR ID COLON type SEMICOLON vars
Rule 4     type -> INT
Rule 5     type -> FLOAT
Rule 6     body -> LBRACE statements RBRACE
Rule 7     function_params -> ID COLON type
Rule 8     function_params -> function_params COMMA ID COLON type
Rule 9     funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
Rule 10    funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
Rule 11    funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
Rule 12    funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
Rule 13    funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON
Rule 14    funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
Rule 15    funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON
Rule 16    funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs
Rule 17    statements -> statement
Rule 18    statements -> statements statement
Rule 19    statement -> assign
Rule 20    statement -> condition
Rule 21    statement -> cycle
Rule 22    statement -> f_call
Rule 23    statement -> print
Rule 24    statement -> empty
Rule 25    assign -> ID EQUAL expression SEMICOLON
Rule 26    condition -> IF LPAREN expression RPAREN body
Rule 27    condition -> IF LPAREN expression RPAREN body ELSE body
Rule 28    cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON
Rule 29    f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON
Rule 30    optional_arguments -> expression
Rule 31    optional_arguments -> optional_arguments COMMA expression
Rule 32    print -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 33    print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON
Rule 34    expression -> exp
Rule 35    expression -> exp GT exp
Rule 36    expression -> exp LT exp
Rule 37    expression -> exp NE exp
Rule 38    exp -> term
Rule 39    exp -> exp PLUS term
Rule 40    exp -> exp MINUS term
Rule 41    term -> factor
Rule 42    term -> term TIMES factor
Rule 43    term -> term DIVIDE factor
Rule 44    factor -> LPAREN expression RPAREN
Rule 45    factor -> PLUS ID
Rule 46    factor -> MINUS ID
Rule 47    factor -> PLUS cte
Rule 48    factor -> MINUS cte
Rule 49    factor -> ID
Rule 50    factor -> cte
Rule 51    cte -> CTE_INT
Rule 52    cte -> CTE_FLOAT
Rule 53    empty -> <empty>

Terminals, with rules where they appear

COLON                : 2 3 7 8
COMMA                : 8 31
CTE_FLOAT            : 52
CTE_INT              : 51
CTE_STRING           : 33
DIVIDE               : 43
DO                   : 28
ELSE                 : 27
END                  : 1
EQUAL                : 25
FLOAT                : 5
GT                   : 35
ID                   : 1 2 3 7 8 9 10 11 12 13 14 15 16 25 29 45 46 49
IF                   : 26 27
INT                  : 4
LBRACE               : 6
LBRACKET             : 9 10 11 12 13 14 15 16
LPAREN               : 9 10 11 12 13 14 15 16 26 27 28 29 32 33 44
LT                   : 36
MAIN                 : 1
MINUS                : 40 46 48
NE                   : 37
PLUS                 : 39 45 47
PRINT                : 32 33
PROGRAM              : 1
RBRACE               : 6
RBRACKET             : 9 10 11 12 13 14 15 16
RPAREN               : 9 10 11 12 13 14 15 16 26 27 28 29 32 33 44
SEMICOLON            : 1 2 3 9 10 11 12 13 14 15 16 25 28 29 32 33
TIMES                : 42
VAR                  : 2 3
VOID                 : 9 10 11 12 13 14 15 16
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

assign               : 19
body                 : 1 9 10 11 12 13 14 15 16 26 27 27 28
condition            : 20
cte                  : 47 48 50
cycle                : 21
empty                : 24
exp                  : 34 35 35 36 36 37 37 39 40
expression           : 25 26 27 28 30 31 32 44
f_call               : 22
factor               : 41 42 43
funcs                : 1 10 12 14 16
function_params      : 8 9 10 13 14
optional_arguments   : 29 31
print                : 23
program              : 0
statement            : 17 18
statements           : 6 18
term                 : 38 39 40 42 43
type                 : 2 3 7 8
vars                 : 1 3 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars funcs MAIN body END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars funcs MAIN body END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars funcs MAIN body END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars funcs MAIN body END
    (2) vars -> . VAR ID COLON type SEMICOLON
    (3) vars -> . VAR ID COLON type SEMICOLON vars

    VAR             shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . funcs MAIN body END
    (9) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (15) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs

    VOID            shift and go to state 8

    funcs                          shift and go to state 7

state 6

    (2) vars -> VAR . ID COLON type SEMICOLON
    (3) vars -> VAR . ID COLON type SEMICOLON vars

    ID              shift and go to state 9


state 7

    (1) program -> PROGRAM ID SEMICOLON vars funcs . MAIN body END

    MAIN            shift and go to state 10


state 8

    (9) funcs -> VOID . ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID . ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> VOID . ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> VOID . ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> VOID . ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> VOID . ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (15) funcs -> VOID . ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> VOID . ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs

    ID              shift and go to state 11


state 9

    (2) vars -> VAR ID . COLON type SEMICOLON
    (3) vars -> VAR ID . COLON type SEMICOLON vars

    COLON           shift and go to state 12


state 10

    (1) program -> PROGRAM ID SEMICOLON vars funcs MAIN . body END
    (6) body -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 13

state 11

    (9) funcs -> VOID ID . LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID . LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> VOID ID . LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> VOID ID . LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> VOID ID . LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> VOID ID . LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (15) funcs -> VOID ID . LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> VOID ID . LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs

    LPAREN          shift and go to state 15


state 12

    (2) vars -> VAR ID COLON . type SEMICOLON
    (3) vars -> VAR ID COLON . type SEMICOLON vars
    (4) type -> . INT
    (5) type -> . FLOAT

    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    type                           shift and go to state 16

state 13

    (1) program -> PROGRAM ID SEMICOLON vars funcs MAIN body . END

    END             shift and go to state 19


state 14

    (6) body -> LBRACE . statements RBRACE
    (17) statements -> . statement
    (18) statements -> . statements statement
    (19) statement -> . assign
    (20) statement -> . condition
    (21) statement -> . cycle
    (22) statement -> . f_call
    (23) statement -> . print
    (24) statement -> . empty
    (25) assign -> . ID EQUAL expression SEMICOLON
    (26) condition -> . IF LPAREN expression RPAREN body
    (27) condition -> . IF LPAREN expression RPAREN body ELSE body
    (28) cycle -> . DO body WHILE LPAREN expression RPAREN SEMICOLON
    (29) f_call -> . ID LPAREN optional_arguments RPAREN SEMICOLON
    (32) print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) print -> . PRINT LPAREN CTE_STRING RPAREN SEMICOLON
    (53) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ID              shift and go to state 28
    IF              shift and go to state 29
    DO              shift and go to state 30
    PRINT           shift and go to state 31
    RBRACE          reduce using rule 53 (empty -> .)

  ! ID              [ reduce using rule 53 (empty -> .) ]
  ! IF              [ reduce using rule 53 (empty -> .) ]
  ! DO              [ reduce using rule 53 (empty -> .) ]
  ! PRINT           [ reduce using rule 53 (empty -> .) ]

    statements                     shift and go to state 20
    statement                      shift and go to state 21
    assign                         shift and go to state 22
    condition                      shift and go to state 23
    cycle                          shift and go to state 24
    f_call                         shift and go to state 25
    print                          shift and go to state 26
    empty                          shift and go to state 27

state 15

    (9) funcs -> VOID ID LPAREN . function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN . function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> VOID ID LPAREN . RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN . RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> VOID ID LPAREN . function_params RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> VOID ID LPAREN . function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (15) funcs -> VOID ID LPAREN . RPAREN LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> VOID ID LPAREN . RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (7) function_params -> . ID COLON type
    (8) function_params -> . function_params COMMA ID COLON type

    RPAREN          shift and go to state 34
    ID              shift and go to state 32

    function_params                shift and go to state 33

state 16

    (2) vars -> VAR ID COLON type . SEMICOLON
    (3) vars -> VAR ID COLON type . SEMICOLON vars

    SEMICOLON       shift and go to state 35


state 17

    (4) type -> INT .

    SEMICOLON       reduce using rule 4 (type -> INT .)
    RPAREN          reduce using rule 4 (type -> INT .)
    COMMA           reduce using rule 4 (type -> INT .)


state 18

    (5) type -> FLOAT .

    SEMICOLON       reduce using rule 5 (type -> FLOAT .)
    RPAREN          reduce using rule 5 (type -> FLOAT .)
    COMMA           reduce using rule 5 (type -> FLOAT .)


state 19

    (1) program -> PROGRAM ID SEMICOLON vars funcs MAIN body END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars funcs MAIN body END .)


state 20

    (6) body -> LBRACE statements . RBRACE
    (18) statements -> statements . statement
    (19) statement -> . assign
    (20) statement -> . condition
    (21) statement -> . cycle
    (22) statement -> . f_call
    (23) statement -> . print
    (24) statement -> . empty
    (25) assign -> . ID EQUAL expression SEMICOLON
    (26) condition -> . IF LPAREN expression RPAREN body
    (27) condition -> . IF LPAREN expression RPAREN body ELSE body
    (28) cycle -> . DO body WHILE LPAREN expression RPAREN SEMICOLON
    (29) f_call -> . ID LPAREN optional_arguments RPAREN SEMICOLON
    (32) print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (33) print -> . PRINT LPAREN CTE_STRING RPAREN SEMICOLON
    (53) empty -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          shift and go to state 36
    ID              shift and go to state 28
    IF              shift and go to state 29
    DO              shift and go to state 30
    PRINT           shift and go to state 31

  ! RBRACE          [ reduce using rule 53 (empty -> .) ]
  ! ID              [ reduce using rule 53 (empty -> .) ]
  ! IF              [ reduce using rule 53 (empty -> .) ]
  ! DO              [ reduce using rule 53 (empty -> .) ]
  ! PRINT           [ reduce using rule 53 (empty -> .) ]

    statement                      shift and go to state 37
    assign                         shift and go to state 22
    condition                      shift and go to state 23
    cycle                          shift and go to state 24
    f_call                         shift and go to state 25
    print                          shift and go to state 26
    empty                          shift and go to state 27

state 21

    (17) statements -> statement .

    RBRACE          reduce using rule 17 (statements -> statement .)
    ID              reduce using rule 17 (statements -> statement .)
    IF              reduce using rule 17 (statements -> statement .)
    DO              reduce using rule 17 (statements -> statement .)
    PRINT           reduce using rule 17 (statements -> statement .)


state 22

    (19) statement -> assign .

    RBRACE          reduce using rule 19 (statement -> assign .)
    ID              reduce using rule 19 (statement -> assign .)
    IF              reduce using rule 19 (statement -> assign .)
    DO              reduce using rule 19 (statement -> assign .)
    PRINT           reduce using rule 19 (statement -> assign .)


state 23

    (20) statement -> condition .

    RBRACE          reduce using rule 20 (statement -> condition .)
    ID              reduce using rule 20 (statement -> condition .)
    IF              reduce using rule 20 (statement -> condition .)
    DO              reduce using rule 20 (statement -> condition .)
    PRINT           reduce using rule 20 (statement -> condition .)


state 24

    (21) statement -> cycle .

    RBRACE          reduce using rule 21 (statement -> cycle .)
    ID              reduce using rule 21 (statement -> cycle .)
    IF              reduce using rule 21 (statement -> cycle .)
    DO              reduce using rule 21 (statement -> cycle .)
    PRINT           reduce using rule 21 (statement -> cycle .)


state 25

    (22) statement -> f_call .

    RBRACE          reduce using rule 22 (statement -> f_call .)
    ID              reduce using rule 22 (statement -> f_call .)
    IF              reduce using rule 22 (statement -> f_call .)
    DO              reduce using rule 22 (statement -> f_call .)
    PRINT           reduce using rule 22 (statement -> f_call .)


state 26

    (23) statement -> print .

    RBRACE          reduce using rule 23 (statement -> print .)
    ID              reduce using rule 23 (statement -> print .)
    IF              reduce using rule 23 (statement -> print .)
    DO              reduce using rule 23 (statement -> print .)
    PRINT           reduce using rule 23 (statement -> print .)


state 27

    (24) statement -> empty .

    RBRACE          reduce using rule 24 (statement -> empty .)
    ID              reduce using rule 24 (statement -> empty .)
    IF              reduce using rule 24 (statement -> empty .)
    DO              reduce using rule 24 (statement -> empty .)
    PRINT           reduce using rule 24 (statement -> empty .)


state 28

    (25) assign -> ID . EQUAL expression SEMICOLON
    (29) f_call -> ID . LPAREN optional_arguments RPAREN SEMICOLON

    EQUAL           shift and go to state 38
    LPAREN          shift and go to state 39


state 29

    (26) condition -> IF . LPAREN expression RPAREN body
    (27) condition -> IF . LPAREN expression RPAREN body ELSE body

    LPAREN          shift and go to state 40


state 30

    (28) cycle -> DO . body WHILE LPAREN expression RPAREN SEMICOLON
    (6) body -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 41

state 31

    (32) print -> PRINT . LPAREN expression RPAREN SEMICOLON
    (33) print -> PRINT . LPAREN CTE_STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 42


state 32

    (7) function_params -> ID . COLON type

    COLON           shift and go to state 43


state 33

    (9) funcs -> VOID ID LPAREN function_params . RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params . RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> VOID ID LPAREN function_params . RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> VOID ID LPAREN function_params . RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (8) function_params -> function_params . COMMA ID COLON type

    RPAREN          shift and go to state 44
    COMMA           shift and go to state 45


state 34

    (11) funcs -> VOID ID LPAREN RPAREN . LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN . LBRACKET vars body RBRACKET SEMICOLON funcs
    (15) funcs -> VOID ID LPAREN RPAREN . LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> VOID ID LPAREN RPAREN . LBRACKET body RBRACKET SEMICOLON funcs

    LBRACKET        shift and go to state 46


state 35

    (2) vars -> VAR ID COLON type SEMICOLON .
    (3) vars -> VAR ID COLON type SEMICOLON . vars
    (2) vars -> . VAR ID COLON type SEMICOLON
    (3) vars -> . VAR ID COLON type SEMICOLON vars

    VOID            reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON .)
    LBRACE          reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON .)
    VAR             shift and go to state 6

    vars                           shift and go to state 47

state 36

    (6) body -> LBRACE statements RBRACE .

    END             reduce using rule 6 (body -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 6 (body -> LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 6 (body -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 6 (body -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 6 (body -> LBRACE statements RBRACE .)
    ID              reduce using rule 6 (body -> LBRACE statements RBRACE .)
    IF              reduce using rule 6 (body -> LBRACE statements RBRACE .)
    DO              reduce using rule 6 (body -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 6 (body -> LBRACE statements RBRACE .)


state 37

    (18) statements -> statements statement .

    RBRACE          reduce using rule 18 (statements -> statements statement .)
    ID              reduce using rule 18 (statements -> statements statement .)
    IF              reduce using rule 18 (statements -> statements statement .)
    DO              reduce using rule 18 (statements -> statements statement .)
    PRINT           reduce using rule 18 (statements -> statements statement .)


state 38

    (25) assign -> ID EQUAL . expression SEMICOLON
    (34) expression -> . exp
    (35) expression -> . exp GT exp
    (36) expression -> . exp LT exp
    (37) expression -> . exp NE exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    expression                     shift and go to state 49
    exp                            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 39

    (29) f_call -> ID LPAREN . optional_arguments RPAREN SEMICOLON
    (30) optional_arguments -> . expression
    (31) optional_arguments -> . optional_arguments COMMA expression
    (34) expression -> . exp
    (35) expression -> . exp GT exp
    (36) expression -> . exp LT exp
    (37) expression -> . exp NE exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    optional_arguments             shift and go to state 59
    expression                     shift and go to state 60
    exp                            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 40

    (26) condition -> IF LPAREN . expression RPAREN body
    (27) condition -> IF LPAREN . expression RPAREN body ELSE body
    (34) expression -> . exp
    (35) expression -> . exp GT exp
    (36) expression -> . exp LT exp
    (37) expression -> . exp NE exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    expression                     shift and go to state 61
    exp                            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 41

    (28) cycle -> DO body . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 62


state 42

    (32) print -> PRINT LPAREN . expression RPAREN SEMICOLON
    (33) print -> PRINT LPAREN . CTE_STRING RPAREN SEMICOLON
    (34) expression -> . exp
    (35) expression -> . exp GT exp
    (36) expression -> . exp LT exp
    (37) expression -> . exp NE exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 64
    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    expression                     shift and go to state 63
    exp                            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 43

    (7) function_params -> ID COLON . type
    (4) type -> . INT
    (5) type -> . FLOAT

    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    type                           shift and go to state 65

state 44

    (9) funcs -> VOID ID LPAREN function_params RPAREN . LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN . LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> VOID ID LPAREN function_params RPAREN . LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> VOID ID LPAREN function_params RPAREN . LBRACKET body RBRACKET SEMICOLON funcs

    LBRACKET        shift and go to state 66


state 45

    (8) function_params -> function_params COMMA . ID COLON type

    ID              shift and go to state 67


state 46

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET . vars body RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET . vars body RBRACKET SEMICOLON funcs
    (15) funcs -> VOID ID LPAREN RPAREN LBRACKET . body RBRACKET SEMICOLON
    (16) funcs -> VOID ID LPAREN RPAREN LBRACKET . body RBRACKET SEMICOLON funcs
    (2) vars -> . VAR ID COLON type SEMICOLON
    (3) vars -> . VAR ID COLON type SEMICOLON vars
    (6) body -> . LBRACE statements RBRACE

    VAR             shift and go to state 6
    LBRACE          shift and go to state 14

    vars                           shift and go to state 68
    body                           shift and go to state 69

state 47

    (3) vars -> VAR ID COLON type SEMICOLON vars .

    VOID            reduce using rule 3 (vars -> VAR ID COLON type SEMICOLON vars .)
    LBRACE          reduce using rule 3 (vars -> VAR ID COLON type SEMICOLON vars .)


state 48

    (49) factor -> ID .

    TIMES           reduce using rule 49 (factor -> ID .)
    DIVIDE          reduce using rule 49 (factor -> ID .)
    GT              reduce using rule 49 (factor -> ID .)
    LT              reduce using rule 49 (factor -> ID .)
    NE              reduce using rule 49 (factor -> ID .)
    PLUS            reduce using rule 49 (factor -> ID .)
    MINUS           reduce using rule 49 (factor -> ID .)
    SEMICOLON       reduce using rule 49 (factor -> ID .)
    RPAREN          reduce using rule 49 (factor -> ID .)
    COMMA           reduce using rule 49 (factor -> ID .)


state 49

    (25) assign -> ID EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 70


state 50

    (34) expression -> exp .
    (35) expression -> exp . GT exp
    (36) expression -> exp . LT exp
    (37) expression -> exp . NE exp
    (39) exp -> exp . PLUS term
    (40) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 34 (expression -> exp .)
    RPAREN          reduce using rule 34 (expression -> exp .)
    COMMA           reduce using rule 34 (expression -> exp .)
    GT              shift and go to state 71
    LT              shift and go to state 72
    NE              shift and go to state 73
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75


state 51

    (38) exp -> term .
    (42) term -> term . TIMES factor
    (43) term -> term . DIVIDE factor

    GT              reduce using rule 38 (exp -> term .)
    LT              reduce using rule 38 (exp -> term .)
    NE              reduce using rule 38 (exp -> term .)
    PLUS            reduce using rule 38 (exp -> term .)
    MINUS           reduce using rule 38 (exp -> term .)
    SEMICOLON       reduce using rule 38 (exp -> term .)
    RPAREN          reduce using rule 38 (exp -> term .)
    COMMA           reduce using rule 38 (exp -> term .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77


state 52

    (45) factor -> PLUS . ID
    (47) factor -> PLUS . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    ID              shift and go to state 78
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    cte                            shift and go to state 79

state 53

    (46) factor -> MINUS . ID
    (48) factor -> MINUS . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    ID              shift and go to state 80
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    cte                            shift and go to state 81

state 54

    (41) term -> factor .

    TIMES           reduce using rule 41 (term -> factor .)
    DIVIDE          reduce using rule 41 (term -> factor .)
    GT              reduce using rule 41 (term -> factor .)
    LT              reduce using rule 41 (term -> factor .)
    NE              reduce using rule 41 (term -> factor .)
    PLUS            reduce using rule 41 (term -> factor .)
    MINUS           reduce using rule 41 (term -> factor .)
    SEMICOLON       reduce using rule 41 (term -> factor .)
    RPAREN          reduce using rule 41 (term -> factor .)
    COMMA           reduce using rule 41 (term -> factor .)


state 55

    (44) factor -> LPAREN . expression RPAREN
    (34) expression -> . exp
    (35) expression -> . exp GT exp
    (36) expression -> . exp LT exp
    (37) expression -> . exp NE exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    expression                     shift and go to state 82
    exp                            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 56

    (50) factor -> cte .

    TIMES           reduce using rule 50 (factor -> cte .)
    DIVIDE          reduce using rule 50 (factor -> cte .)
    GT              reduce using rule 50 (factor -> cte .)
    LT              reduce using rule 50 (factor -> cte .)
    NE              reduce using rule 50 (factor -> cte .)
    PLUS            reduce using rule 50 (factor -> cte .)
    MINUS           reduce using rule 50 (factor -> cte .)
    SEMICOLON       reduce using rule 50 (factor -> cte .)
    RPAREN          reduce using rule 50 (factor -> cte .)
    COMMA           reduce using rule 50 (factor -> cte .)


state 57

    (51) cte -> CTE_INT .

    TIMES           reduce using rule 51 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 51 (cte -> CTE_INT .)
    GT              reduce using rule 51 (cte -> CTE_INT .)
    LT              reduce using rule 51 (cte -> CTE_INT .)
    NE              reduce using rule 51 (cte -> CTE_INT .)
    PLUS            reduce using rule 51 (cte -> CTE_INT .)
    MINUS           reduce using rule 51 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 51 (cte -> CTE_INT .)
    RPAREN          reduce using rule 51 (cte -> CTE_INT .)
    COMMA           reduce using rule 51 (cte -> CTE_INT .)


state 58

    (52) cte -> CTE_FLOAT .

    TIMES           reduce using rule 52 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 52 (cte -> CTE_FLOAT .)
    GT              reduce using rule 52 (cte -> CTE_FLOAT .)
    LT              reduce using rule 52 (cte -> CTE_FLOAT .)
    NE              reduce using rule 52 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 52 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 52 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 52 (cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 52 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 52 (cte -> CTE_FLOAT .)


state 59

    (29) f_call -> ID LPAREN optional_arguments . RPAREN SEMICOLON
    (31) optional_arguments -> optional_arguments . COMMA expression

    RPAREN          shift and go to state 83
    COMMA           shift and go to state 84


state 60

    (30) optional_arguments -> expression .

    RPAREN          reduce using rule 30 (optional_arguments -> expression .)
    COMMA           reduce using rule 30 (optional_arguments -> expression .)


state 61

    (26) condition -> IF LPAREN expression . RPAREN body
    (27) condition -> IF LPAREN expression . RPAREN body ELSE body

    RPAREN          shift and go to state 85


state 62

    (28) cycle -> DO body WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 86


state 63

    (32) print -> PRINT LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 87


state 64

    (33) print -> PRINT LPAREN CTE_STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 88


state 65

    (7) function_params -> ID COLON type .

    RPAREN          reduce using rule 7 (function_params -> ID COLON type .)
    COMMA           reduce using rule 7 (function_params -> ID COLON type .)


state 66

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET . vars body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET . vars body RBRACKET SEMICOLON funcs
    (13) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET . body RBRACKET SEMICOLON
    (14) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET . body RBRACKET SEMICOLON funcs
    (2) vars -> . VAR ID COLON type SEMICOLON
    (3) vars -> . VAR ID COLON type SEMICOLON vars
    (6) body -> . LBRACE statements RBRACE

    VAR             shift and go to state 6
    LBRACE          shift and go to state 14

    vars                           shift and go to state 89
    body                           shift and go to state 90

state 67

    (8) function_params -> function_params COMMA ID . COLON type

    COLON           shift and go to state 91


state 68

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET vars . body RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars . body RBRACKET SEMICOLON funcs
    (6) body -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 92

state 69

    (15) funcs -> VOID ID LPAREN RPAREN LBRACKET body . RBRACKET SEMICOLON
    (16) funcs -> VOID ID LPAREN RPAREN LBRACKET body . RBRACKET SEMICOLON funcs

    RBRACKET        shift and go to state 93


state 70

    (25) assign -> ID EQUAL expression SEMICOLON .

    RBRACE          reduce using rule 25 (assign -> ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 25 (assign -> ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 25 (assign -> ID EQUAL expression SEMICOLON .)
    DO              reduce using rule 25 (assign -> ID EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 25 (assign -> ID EQUAL expression SEMICOLON .)


state 71

    (35) expression -> exp GT . exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    exp                            shift and go to state 94
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 72

    (36) expression -> exp LT . exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    exp                            shift and go to state 95
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 73

    (37) expression -> exp NE . exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    exp                            shift and go to state 96
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 74

    (39) exp -> exp PLUS . term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    term                           shift and go to state 97
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 75

    (40) exp -> exp MINUS . term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    term                           shift and go to state 98
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 76

    (42) term -> term TIMES . factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    factor                         shift and go to state 99
    cte                            shift and go to state 56

state 77

    (43) term -> term DIVIDE . factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    factor                         shift and go to state 100
    cte                            shift and go to state 56

state 78

    (45) factor -> PLUS ID .

    TIMES           reduce using rule 45 (factor -> PLUS ID .)
    DIVIDE          reduce using rule 45 (factor -> PLUS ID .)
    GT              reduce using rule 45 (factor -> PLUS ID .)
    LT              reduce using rule 45 (factor -> PLUS ID .)
    NE              reduce using rule 45 (factor -> PLUS ID .)
    PLUS            reduce using rule 45 (factor -> PLUS ID .)
    MINUS           reduce using rule 45 (factor -> PLUS ID .)
    SEMICOLON       reduce using rule 45 (factor -> PLUS ID .)
    RPAREN          reduce using rule 45 (factor -> PLUS ID .)
    COMMA           reduce using rule 45 (factor -> PLUS ID .)


state 79

    (47) factor -> PLUS cte .

    TIMES           reduce using rule 47 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 47 (factor -> PLUS cte .)
    GT              reduce using rule 47 (factor -> PLUS cte .)
    LT              reduce using rule 47 (factor -> PLUS cte .)
    NE              reduce using rule 47 (factor -> PLUS cte .)
    PLUS            reduce using rule 47 (factor -> PLUS cte .)
    MINUS           reduce using rule 47 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 47 (factor -> PLUS cte .)
    RPAREN          reduce using rule 47 (factor -> PLUS cte .)
    COMMA           reduce using rule 47 (factor -> PLUS cte .)


state 80

    (46) factor -> MINUS ID .

    TIMES           reduce using rule 46 (factor -> MINUS ID .)
    DIVIDE          reduce using rule 46 (factor -> MINUS ID .)
    GT              reduce using rule 46 (factor -> MINUS ID .)
    LT              reduce using rule 46 (factor -> MINUS ID .)
    NE              reduce using rule 46 (factor -> MINUS ID .)
    PLUS            reduce using rule 46 (factor -> MINUS ID .)
    MINUS           reduce using rule 46 (factor -> MINUS ID .)
    SEMICOLON       reduce using rule 46 (factor -> MINUS ID .)
    RPAREN          reduce using rule 46 (factor -> MINUS ID .)
    COMMA           reduce using rule 46 (factor -> MINUS ID .)


state 81

    (48) factor -> MINUS cte .

    TIMES           reduce using rule 48 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 48 (factor -> MINUS cte .)
    GT              reduce using rule 48 (factor -> MINUS cte .)
    LT              reduce using rule 48 (factor -> MINUS cte .)
    NE              reduce using rule 48 (factor -> MINUS cte .)
    PLUS            reduce using rule 48 (factor -> MINUS cte .)
    MINUS           reduce using rule 48 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 48 (factor -> MINUS cte .)
    RPAREN          reduce using rule 48 (factor -> MINUS cte .)
    COMMA           reduce using rule 48 (factor -> MINUS cte .)


state 82

    (44) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 101


state 83

    (29) f_call -> ID LPAREN optional_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 102


state 84

    (31) optional_arguments -> optional_arguments COMMA . expression
    (34) expression -> . exp
    (35) expression -> . exp GT exp
    (36) expression -> . exp LT exp
    (37) expression -> . exp NE exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    expression                     shift and go to state 103
    exp                            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 85

    (26) condition -> IF LPAREN expression RPAREN . body
    (27) condition -> IF LPAREN expression RPAREN . body ELSE body
    (6) body -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 104

state 86

    (28) cycle -> DO body WHILE LPAREN . expression RPAREN SEMICOLON
    (34) expression -> . exp
    (35) expression -> . exp GT exp
    (36) expression -> . exp LT exp
    (37) expression -> . exp NE exp
    (38) exp -> . term
    (39) exp -> . exp PLUS term
    (40) exp -> . exp MINUS term
    (41) term -> . factor
    (42) term -> . term TIMES factor
    (43) term -> . term DIVIDE factor
    (44) factor -> . LPAREN expression RPAREN
    (45) factor -> . PLUS ID
    (46) factor -> . MINUS ID
    (47) factor -> . PLUS cte
    (48) factor -> . MINUS cte
    (49) factor -> . ID
    (50) factor -> . cte
    (51) cte -> . CTE_INT
    (52) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 55
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    ID              shift and go to state 48
    CTE_INT         shift and go to state 57
    CTE_FLOAT       shift and go to state 58

    expression                     shift and go to state 105
    exp                            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 54
    cte                            shift and go to state 56

state 87

    (32) print -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 106


state 88

    (33) print -> PRINT LPAREN CTE_STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 107


state 89

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars . body RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars . body RBRACKET SEMICOLON funcs
    (6) body -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 108

state 90

    (13) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body . RBRACKET SEMICOLON
    (14) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body . RBRACKET SEMICOLON funcs

    RBRACKET        shift and go to state 109


state 91

    (8) function_params -> function_params COMMA ID COLON . type
    (4) type -> . INT
    (5) type -> . FLOAT

    INT             shift and go to state 17
    FLOAT           shift and go to state 18

    type                           shift and go to state 110

state 92

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body . RBRACKET SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body . RBRACKET SEMICOLON funcs

    RBRACKET        shift and go to state 111


state 93

    (15) funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET . SEMICOLON
    (16) funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET . SEMICOLON funcs

    SEMICOLON       shift and go to state 112


state 94

    (35) expression -> exp GT exp .
    (39) exp -> exp . PLUS term
    (40) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 35 (expression -> exp GT exp .)
    RPAREN          reduce using rule 35 (expression -> exp GT exp .)
    COMMA           reduce using rule 35 (expression -> exp GT exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75


state 95

    (36) expression -> exp LT exp .
    (39) exp -> exp . PLUS term
    (40) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 36 (expression -> exp LT exp .)
    RPAREN          reduce using rule 36 (expression -> exp LT exp .)
    COMMA           reduce using rule 36 (expression -> exp LT exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75


state 96

    (37) expression -> exp NE exp .
    (39) exp -> exp . PLUS term
    (40) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 37 (expression -> exp NE exp .)
    RPAREN          reduce using rule 37 (expression -> exp NE exp .)
    COMMA           reduce using rule 37 (expression -> exp NE exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75


state 97

    (39) exp -> exp PLUS term .
    (42) term -> term . TIMES factor
    (43) term -> term . DIVIDE factor

    GT              reduce using rule 39 (exp -> exp PLUS term .)
    LT              reduce using rule 39 (exp -> exp PLUS term .)
    NE              reduce using rule 39 (exp -> exp PLUS term .)
    PLUS            reduce using rule 39 (exp -> exp PLUS term .)
    MINUS           reduce using rule 39 (exp -> exp PLUS term .)
    SEMICOLON       reduce using rule 39 (exp -> exp PLUS term .)
    RPAREN          reduce using rule 39 (exp -> exp PLUS term .)
    COMMA           reduce using rule 39 (exp -> exp PLUS term .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77


state 98

    (40) exp -> exp MINUS term .
    (42) term -> term . TIMES factor
    (43) term -> term . DIVIDE factor

    GT              reduce using rule 40 (exp -> exp MINUS term .)
    LT              reduce using rule 40 (exp -> exp MINUS term .)
    NE              reduce using rule 40 (exp -> exp MINUS term .)
    PLUS            reduce using rule 40 (exp -> exp MINUS term .)
    MINUS           reduce using rule 40 (exp -> exp MINUS term .)
    SEMICOLON       reduce using rule 40 (exp -> exp MINUS term .)
    RPAREN          reduce using rule 40 (exp -> exp MINUS term .)
    COMMA           reduce using rule 40 (exp -> exp MINUS term .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77


state 99

    (42) term -> term TIMES factor .

    TIMES           reduce using rule 42 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 42 (term -> term TIMES factor .)
    GT              reduce using rule 42 (term -> term TIMES factor .)
    LT              reduce using rule 42 (term -> term TIMES factor .)
    NE              reduce using rule 42 (term -> term TIMES factor .)
    PLUS            reduce using rule 42 (term -> term TIMES factor .)
    MINUS           reduce using rule 42 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 42 (term -> term TIMES factor .)
    RPAREN          reduce using rule 42 (term -> term TIMES factor .)
    COMMA           reduce using rule 42 (term -> term TIMES factor .)


state 100

    (43) term -> term DIVIDE factor .

    TIMES           reduce using rule 43 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 43 (term -> term DIVIDE factor .)
    GT              reduce using rule 43 (term -> term DIVIDE factor .)
    LT              reduce using rule 43 (term -> term DIVIDE factor .)
    NE              reduce using rule 43 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 43 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 43 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 43 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 43 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 43 (term -> term DIVIDE factor .)


state 101

    (44) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 44 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 44 (factor -> LPAREN expression RPAREN .)


state 102

    (29) f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON .

    RBRACE          reduce using rule 29 (f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 29 (f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 29 (f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 29 (f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 29 (f_call -> ID LPAREN optional_arguments RPAREN SEMICOLON .)


state 103

    (31) optional_arguments -> optional_arguments COMMA expression .

    RPAREN          reduce using rule 31 (optional_arguments -> optional_arguments COMMA expression .)
    COMMA           reduce using rule 31 (optional_arguments -> optional_arguments COMMA expression .)


state 104

    (26) condition -> IF LPAREN expression RPAREN body .
    (27) condition -> IF LPAREN expression RPAREN body . ELSE body

    RBRACE          reduce using rule 26 (condition -> IF LPAREN expression RPAREN body .)
    ID              reduce using rule 26 (condition -> IF LPAREN expression RPAREN body .)
    IF              reduce using rule 26 (condition -> IF LPAREN expression RPAREN body .)
    DO              reduce using rule 26 (condition -> IF LPAREN expression RPAREN body .)
    PRINT           reduce using rule 26 (condition -> IF LPAREN expression RPAREN body .)
    ELSE            shift and go to state 113


state 105

    (28) cycle -> DO body WHILE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 114


state 106

    (32) print -> PRINT LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 32 (print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 32 (print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 32 (print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 32 (print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 32 (print -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 107

    (33) print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON .

    RBRACE          reduce using rule 33 (print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON .)
    ID              reduce using rule 33 (print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON .)
    IF              reduce using rule 33 (print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON .)
    DO              reduce using rule 33 (print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON .)
    PRINT           reduce using rule 33 (print -> PRINT LPAREN CTE_STRING RPAREN SEMICOLON .)


state 108

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body . RBRACKET SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body . RBRACKET SEMICOLON funcs

    RBRACKET        shift and go to state 115


state 109

    (13) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET . SEMICOLON
    (14) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET . SEMICOLON funcs

    SEMICOLON       shift and go to state 116


state 110

    (8) function_params -> function_params COMMA ID COLON type .

    RPAREN          reduce using rule 8 (function_params -> function_params COMMA ID COLON type .)
    COMMA           reduce using rule 8 (function_params -> function_params COMMA ID COLON type .)


state 111

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET . SEMICOLON
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET . SEMICOLON funcs

    SEMICOLON       shift and go to state 117


state 112

    (15) funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON .
    (16) funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON . funcs
    (9) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (15) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs

    MAIN            reduce using rule 15 (funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON .)
    VOID            shift and go to state 8

    funcs                          shift and go to state 118

state 113

    (27) condition -> IF LPAREN expression RPAREN body ELSE . body
    (6) body -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 119

state 114

    (28) cycle -> DO body WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 120


state 115

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET . SEMICOLON
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET . SEMICOLON funcs

    SEMICOLON       shift and go to state 121


state 116

    (13) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON .
    (14) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON . funcs
    (9) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (15) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs

    MAIN            reduce using rule 13 (funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON .)
    VOID            shift and go to state 8

    funcs                          shift and go to state 122

state 117

    (11) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON .
    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON . funcs
    (9) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (15) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs

    MAIN            reduce using rule 11 (funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON .)
    VOID            shift and go to state 8

    funcs                          shift and go to state 123

state 118

    (16) funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs .

    MAIN            reduce using rule 16 (funcs -> VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs .)


state 119

    (27) condition -> IF LPAREN expression RPAREN body ELSE body .

    RBRACE          reduce using rule 27 (condition -> IF LPAREN expression RPAREN body ELSE body .)
    ID              reduce using rule 27 (condition -> IF LPAREN expression RPAREN body ELSE body .)
    IF              reduce using rule 27 (condition -> IF LPAREN expression RPAREN body ELSE body .)
    DO              reduce using rule 27 (condition -> IF LPAREN expression RPAREN body ELSE body .)
    PRINT           reduce using rule 27 (condition -> IF LPAREN expression RPAREN body ELSE body .)


state 120

    (28) cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 28 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 28 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 28 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 28 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 28 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)


state 121

    (9) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON .
    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON . funcs
    (9) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (10) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (11) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON
    (12) funcs -> . VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs
    (13) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON
    (14) funcs -> . VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs
    (15) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON
    (16) funcs -> . VOID ID LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON funcs

    MAIN            reduce using rule 9 (funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON .)
    VOID            shift and go to state 8

    funcs                          shift and go to state 124

state 122

    (14) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs .

    MAIN            reduce using rule 14 (funcs -> VOID ID LPAREN function_params RPAREN LBRACKET body RBRACKET SEMICOLON funcs .)


state 123

    (12) funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs .

    MAIN            reduce using rule 12 (funcs -> VOID ID LPAREN RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs .)


state 124

    (10) funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs .

    MAIN            reduce using rule 10 (funcs -> VOID ID LPAREN function_params RPAREN LBRACKET vars body RBRACKET SEMICOLON funcs .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 14 resolved as shift
WARNING: shift/reduce conflict for IF in state 14 resolved as shift
WARNING: shift/reduce conflict for DO in state 14 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 14 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 20 resolved as shift
WARNING: shift/reduce conflict for ID in state 20 resolved as shift
WARNING: shift/reduce conflict for IF in state 20 resolved as shift
WARNING: shift/reduce conflict for DO in state 20 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 20 resolved as shift
