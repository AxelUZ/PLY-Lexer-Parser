Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    VOID

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON return_vars MAIN body END
Rule 2     program -> PROGRAM ID SEMICOLON MAIN body END
Rule 3     return_vars -> vars
Rule 4     return_vars -> return_vars vars
Rule 5     vars -> VAR list_vars COLON type SEMICOLON
Rule 6     vars -> list_vars COLON type SEMICOLON
Rule 7     list_vars -> ID
Rule 8     list_vars -> list_vars COMMA ID
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    return_statement -> statement
Rule 12    return_statement -> return_statement statement
Rule 13    body -> LBRACE return_statement RBRACE
Rule 14    statement -> assign
Rule 15    statement -> condition
Rule 16    statement -> cycle
Rule 17    statement -> print
Rule 18    statement -> empty
Rule 19    assign -> ID EQUAL expression SEMICOLON
Rule 20    condition -> IF LPAREN expression RPAREN body
Rule 21    condition -> IF LPAREN expression RPAREN body ELSE body
Rule 22    cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON
Rule 23    print -> PRINT LPAREN list_print_expression RPAREN SEMICOLON
Rule 24    print -> PRINT LPAREN list_print_cte RPAREN SEMICOLON
Rule 25    list_print_expression -> expression
Rule 26    list_print_expression -> list_print_expression COMMA expression
Rule 27    list_print_cte -> CTE_STRING
Rule 28    list_print_cte -> list_print_cte COMMA CTE_STRING
Rule 29    expression -> exp
Rule 30    expression -> exp GT exp
Rule 31    expression -> exp LT exp
Rule 32    expression -> exp NE exp
Rule 33    exp -> term
Rule 34    exp -> exp PLUS term
Rule 35    exp -> exp MINUS term
Rule 36    term -> factor
Rule 37    term -> term TIMES factor
Rule 38    term -> term DIVIDE factor
Rule 39    factor -> LPAREN expression RPAREN
Rule 40    factor -> PLUS ID
Rule 41    factor -> MINUS ID
Rule 42    factor -> PLUS cte
Rule 43    factor -> MINUS cte
Rule 44    factor -> ID
Rule 45    factor -> cte
Rule 46    cte -> CTE_INT
Rule 47    cte -> CTE_FLOAT
Rule 48    empty -> <empty>

Terminals, with rules where they appear

COLON                : 5 6
COMMA                : 8 26 28
CTE_FLOAT            : 47
CTE_INT              : 46
CTE_STRING           : 27 28
DIVIDE               : 38
DO                   : 22
ELSE                 : 21
END                  : 1 2
EQUAL                : 19
FLOAT                : 10
GT                   : 30
ID                   : 1 2 7 8 19 40 41 44
IF                   : 20 21
INT                  : 9
LBRACE               : 13
LPAREN               : 20 21 22 23 24 39
LT                   : 31
MAIN                 : 1 2
MINUS                : 35 41 43
NE                   : 32
PLUS                 : 34 40 42
PRINT                : 23 24
PROGRAM              : 1 2
RBRACE               : 13
RPAREN               : 20 21 22 23 24 39
SEMICOLON            : 1 2 5 6 19 22 23 24
TIMES                : 37
VAR                  : 5
VOID                 : 
WHILE                : 22
error                : 

Nonterminals, with rules where they appear

assign               : 14
body                 : 1 2 20 21 21 22
condition            : 15
cte                  : 42 43 45
cycle                : 16
empty                : 18
exp                  : 29 30 30 31 31 32 32 34 35
expression           : 19 20 21 22 25 26 39
factor               : 36 37 38
list_print_cte       : 24 28
list_print_expression : 23 26
list_vars            : 5 6 8
print                : 17
program              : 0
return_statement     : 12 13
return_vars          : 1 4
statement            : 11 12
term                 : 33 34 35 37 38
type                 : 5 6
vars                 : 3 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON return_vars MAIN body END
    (2) program -> . PROGRAM ID SEMICOLON MAIN body END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON return_vars MAIN body END
    (2) program -> PROGRAM . ID SEMICOLON MAIN body END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON return_vars MAIN body END
    (2) program -> PROGRAM ID . SEMICOLON MAIN body END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . return_vars MAIN body END
    (2) program -> PROGRAM ID SEMICOLON . MAIN body END
    (3) return_vars -> . vars
    (4) return_vars -> . return_vars vars
    (5) vars -> . VAR list_vars COLON type SEMICOLON
    (6) vars -> . list_vars COLON type SEMICOLON
    (7) list_vars -> . ID
    (8) list_vars -> . list_vars COMMA ID

    MAIN            shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 5

    return_vars                    shift and go to state 6
    vars                           shift and go to state 8
    list_vars                      shift and go to state 10

state 5

    (7) list_vars -> ID .

    COLON           reduce using rule 7 (list_vars -> ID .)
    COMMA           reduce using rule 7 (list_vars -> ID .)


state 6

    (1) program -> PROGRAM ID SEMICOLON return_vars . MAIN body END
    (4) return_vars -> return_vars . vars
    (5) vars -> . VAR list_vars COLON type SEMICOLON
    (6) vars -> . list_vars COLON type SEMICOLON
    (7) list_vars -> . ID
    (8) list_vars -> . list_vars COMMA ID

    MAIN            shift and go to state 11
    VAR             shift and go to state 9
    ID              shift and go to state 5

    vars                           shift and go to state 12
    list_vars                      shift and go to state 10

state 7

    (2) program -> PROGRAM ID SEMICOLON MAIN . body END
    (13) body -> . LBRACE return_statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 13

state 8

    (3) return_vars -> vars .

    MAIN            reduce using rule 3 (return_vars -> vars .)
    VAR             reduce using rule 3 (return_vars -> vars .)
    ID              reduce using rule 3 (return_vars -> vars .)


state 9

    (5) vars -> VAR . list_vars COLON type SEMICOLON
    (7) list_vars -> . ID
    (8) list_vars -> . list_vars COMMA ID

    ID              shift and go to state 5

    list_vars                      shift and go to state 15

state 10

    (6) vars -> list_vars . COLON type SEMICOLON
    (8) list_vars -> list_vars . COMMA ID

    COLON           shift and go to state 16
    COMMA           shift and go to state 17


state 11

    (1) program -> PROGRAM ID SEMICOLON return_vars MAIN . body END
    (13) body -> . LBRACE return_statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 18

state 12

    (4) return_vars -> return_vars vars .

    MAIN            reduce using rule 4 (return_vars -> return_vars vars .)
    VAR             reduce using rule 4 (return_vars -> return_vars vars .)
    ID              reduce using rule 4 (return_vars -> return_vars vars .)


state 13

    (2) program -> PROGRAM ID SEMICOLON MAIN body . END

    END             shift and go to state 19


state 14

    (13) body -> LBRACE . return_statement RBRACE
    (11) return_statement -> . statement
    (12) return_statement -> . return_statement statement
    (14) statement -> . assign
    (15) statement -> . condition
    (16) statement -> . cycle
    (17) statement -> . print
    (18) statement -> . empty
    (19) assign -> . ID EQUAL expression SEMICOLON
    (20) condition -> . IF LPAREN expression RPAREN body
    (21) condition -> . IF LPAREN expression RPAREN body ELSE body
    (22) cycle -> . DO body WHILE LPAREN expression RPAREN SEMICOLON
    (23) print -> . PRINT LPAREN list_print_expression RPAREN SEMICOLON
    (24) print -> . PRINT LPAREN list_print_cte RPAREN SEMICOLON
    (48) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    ID              shift and go to state 27
    IF              shift and go to state 28
    DO              shift and go to state 29
    PRINT           shift and go to state 30
    RBRACE          reduce using rule 48 (empty -> .)

  ! ID              [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! DO              [ reduce using rule 48 (empty -> .) ]
  ! PRINT           [ reduce using rule 48 (empty -> .) ]

    return_statement               shift and go to state 20
    statement                      shift and go to state 21
    assign                         shift and go to state 22
    condition                      shift and go to state 23
    cycle                          shift and go to state 24
    print                          shift and go to state 25
    empty                          shift and go to state 26

state 15

    (5) vars -> VAR list_vars . COLON type SEMICOLON
    (8) list_vars -> list_vars . COMMA ID

    COLON           shift and go to state 31
    COMMA           shift and go to state 17


state 16

    (6) vars -> list_vars COLON . type SEMICOLON
    (9) type -> . INT
    (10) type -> . FLOAT

    INT             shift and go to state 33
    FLOAT           shift and go to state 34

    type                           shift and go to state 32

state 17

    (8) list_vars -> list_vars COMMA . ID

    ID              shift and go to state 35


state 18

    (1) program -> PROGRAM ID SEMICOLON return_vars MAIN body . END

    END             shift and go to state 36


state 19

    (2) program -> PROGRAM ID SEMICOLON MAIN body END .

    $end            reduce using rule 2 (program -> PROGRAM ID SEMICOLON MAIN body END .)


state 20

    (13) body -> LBRACE return_statement . RBRACE
    (12) return_statement -> return_statement . statement
    (14) statement -> . assign
    (15) statement -> . condition
    (16) statement -> . cycle
    (17) statement -> . print
    (18) statement -> . empty
    (19) assign -> . ID EQUAL expression SEMICOLON
    (20) condition -> . IF LPAREN expression RPAREN body
    (21) condition -> . IF LPAREN expression RPAREN body ELSE body
    (22) cycle -> . DO body WHILE LPAREN expression RPAREN SEMICOLON
    (23) print -> . PRINT LPAREN list_print_expression RPAREN SEMICOLON
    (24) print -> . PRINT LPAREN list_print_cte RPAREN SEMICOLON
    (48) empty -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          shift and go to state 37
    ID              shift and go to state 27
    IF              shift and go to state 28
    DO              shift and go to state 29
    PRINT           shift and go to state 30

  ! RBRACE          [ reduce using rule 48 (empty -> .) ]
  ! ID              [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! DO              [ reduce using rule 48 (empty -> .) ]
  ! PRINT           [ reduce using rule 48 (empty -> .) ]

    statement                      shift and go to state 38
    assign                         shift and go to state 22
    condition                      shift and go to state 23
    cycle                          shift and go to state 24
    print                          shift and go to state 25
    empty                          shift and go to state 26

state 21

    (11) return_statement -> statement .

    RBRACE          reduce using rule 11 (return_statement -> statement .)
    ID              reduce using rule 11 (return_statement -> statement .)
    IF              reduce using rule 11 (return_statement -> statement .)
    DO              reduce using rule 11 (return_statement -> statement .)
    PRINT           reduce using rule 11 (return_statement -> statement .)


state 22

    (14) statement -> assign .

    RBRACE          reduce using rule 14 (statement -> assign .)
    ID              reduce using rule 14 (statement -> assign .)
    IF              reduce using rule 14 (statement -> assign .)
    DO              reduce using rule 14 (statement -> assign .)
    PRINT           reduce using rule 14 (statement -> assign .)


state 23

    (15) statement -> condition .

    RBRACE          reduce using rule 15 (statement -> condition .)
    ID              reduce using rule 15 (statement -> condition .)
    IF              reduce using rule 15 (statement -> condition .)
    DO              reduce using rule 15 (statement -> condition .)
    PRINT           reduce using rule 15 (statement -> condition .)


state 24

    (16) statement -> cycle .

    RBRACE          reduce using rule 16 (statement -> cycle .)
    ID              reduce using rule 16 (statement -> cycle .)
    IF              reduce using rule 16 (statement -> cycle .)
    DO              reduce using rule 16 (statement -> cycle .)
    PRINT           reduce using rule 16 (statement -> cycle .)


state 25

    (17) statement -> print .

    RBRACE          reduce using rule 17 (statement -> print .)
    ID              reduce using rule 17 (statement -> print .)
    IF              reduce using rule 17 (statement -> print .)
    DO              reduce using rule 17 (statement -> print .)
    PRINT           reduce using rule 17 (statement -> print .)


state 26

    (18) statement -> empty .

    RBRACE          reduce using rule 18 (statement -> empty .)
    ID              reduce using rule 18 (statement -> empty .)
    IF              reduce using rule 18 (statement -> empty .)
    DO              reduce using rule 18 (statement -> empty .)
    PRINT           reduce using rule 18 (statement -> empty .)


state 27

    (19) assign -> ID . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 39


state 28

    (20) condition -> IF . LPAREN expression RPAREN body
    (21) condition -> IF . LPAREN expression RPAREN body ELSE body

    LPAREN          shift and go to state 40


state 29

    (22) cycle -> DO . body WHILE LPAREN expression RPAREN SEMICOLON
    (13) body -> . LBRACE return_statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 41

state 30

    (23) print -> PRINT . LPAREN list_print_expression RPAREN SEMICOLON
    (24) print -> PRINT . LPAREN list_print_cte RPAREN SEMICOLON

    LPAREN          shift and go to state 42


state 31

    (5) vars -> VAR list_vars COLON . type SEMICOLON
    (9) type -> . INT
    (10) type -> . FLOAT

    INT             shift and go to state 33
    FLOAT           shift and go to state 34

    type                           shift and go to state 43

state 32

    (6) vars -> list_vars COLON type . SEMICOLON

    SEMICOLON       shift and go to state 44


state 33

    (9) type -> INT .

    SEMICOLON       reduce using rule 9 (type -> INT .)


state 34

    (10) type -> FLOAT .

    SEMICOLON       reduce using rule 10 (type -> FLOAT .)


state 35

    (8) list_vars -> list_vars COMMA ID .

    COLON           reduce using rule 8 (list_vars -> list_vars COMMA ID .)
    COMMA           reduce using rule 8 (list_vars -> list_vars COMMA ID .)


state 36

    (1) program -> PROGRAM ID SEMICOLON return_vars MAIN body END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON return_vars MAIN body END .)


state 37

    (13) body -> LBRACE return_statement RBRACE .

    END             reduce using rule 13 (body -> LBRACE return_statement RBRACE .)
    WHILE           reduce using rule 13 (body -> LBRACE return_statement RBRACE .)
    ELSE            reduce using rule 13 (body -> LBRACE return_statement RBRACE .)
    RBRACE          reduce using rule 13 (body -> LBRACE return_statement RBRACE .)
    ID              reduce using rule 13 (body -> LBRACE return_statement RBRACE .)
    IF              reduce using rule 13 (body -> LBRACE return_statement RBRACE .)
    DO              reduce using rule 13 (body -> LBRACE return_statement RBRACE .)
    PRINT           reduce using rule 13 (body -> LBRACE return_statement RBRACE .)


state 38

    (12) return_statement -> return_statement statement .

    RBRACE          reduce using rule 12 (return_statement -> return_statement statement .)
    ID              reduce using rule 12 (return_statement -> return_statement statement .)
    IF              reduce using rule 12 (return_statement -> return_statement statement .)
    DO              reduce using rule 12 (return_statement -> return_statement statement .)
    PRINT           reduce using rule 12 (return_statement -> return_statement statement .)


state 39

    (19) assign -> ID EQUAL . expression SEMICOLON
    (29) expression -> . exp
    (30) expression -> . exp GT exp
    (31) expression -> . exp LT exp
    (32) expression -> . exp NE exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 46
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 40

    (20) condition -> IF LPAREN . expression RPAREN body
    (21) condition -> IF LPAREN . expression RPAREN body ELSE body
    (29) expression -> . exp
    (30) expression -> . exp GT exp
    (31) expression -> . exp LT exp
    (32) expression -> . exp NE exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 56
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 41

    (22) cycle -> DO body . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 57


state 42

    (23) print -> PRINT LPAREN . list_print_expression RPAREN SEMICOLON
    (24) print -> PRINT LPAREN . list_print_cte RPAREN SEMICOLON
    (25) list_print_expression -> . expression
    (26) list_print_expression -> . list_print_expression COMMA expression
    (27) list_print_cte -> . CTE_STRING
    (28) list_print_cte -> . list_print_cte COMMA CTE_STRING
    (29) expression -> . exp
    (30) expression -> . exp GT exp
    (31) expression -> . exp LT exp
    (32) expression -> . exp NE exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 61
    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    list_print_expression          shift and go to state 58
    list_print_cte                 shift and go to state 59
    expression                     shift and go to state 60
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 43

    (5) vars -> VAR list_vars COLON type . SEMICOLON

    SEMICOLON       shift and go to state 62


state 44

    (6) vars -> list_vars COLON type SEMICOLON .

    MAIN            reduce using rule 6 (vars -> list_vars COLON type SEMICOLON .)
    VAR             reduce using rule 6 (vars -> list_vars COLON type SEMICOLON .)
    ID              reduce using rule 6 (vars -> list_vars COLON type SEMICOLON .)


state 45

    (44) factor -> ID .

    TIMES           reduce using rule 44 (factor -> ID .)
    DIVIDE          reduce using rule 44 (factor -> ID .)
    GT              reduce using rule 44 (factor -> ID .)
    LT              reduce using rule 44 (factor -> ID .)
    NE              reduce using rule 44 (factor -> ID .)
    PLUS            reduce using rule 44 (factor -> ID .)
    MINUS           reduce using rule 44 (factor -> ID .)
    SEMICOLON       reduce using rule 44 (factor -> ID .)
    RPAREN          reduce using rule 44 (factor -> ID .)
    COMMA           reduce using rule 44 (factor -> ID .)


state 46

    (19) assign -> ID EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 63


state 47

    (29) expression -> exp .
    (30) expression -> exp . GT exp
    (31) expression -> exp . LT exp
    (32) expression -> exp . NE exp
    (34) exp -> exp . PLUS term
    (35) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 29 (expression -> exp .)
    RPAREN          reduce using rule 29 (expression -> exp .)
    COMMA           reduce using rule 29 (expression -> exp .)
    GT              shift and go to state 64
    LT              shift and go to state 65
    NE              shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68


state 48

    (33) exp -> term .
    (37) term -> term . TIMES factor
    (38) term -> term . DIVIDE factor

    GT              reduce using rule 33 (exp -> term .)
    LT              reduce using rule 33 (exp -> term .)
    NE              reduce using rule 33 (exp -> term .)
    PLUS            reduce using rule 33 (exp -> term .)
    MINUS           reduce using rule 33 (exp -> term .)
    SEMICOLON       reduce using rule 33 (exp -> term .)
    RPAREN          reduce using rule 33 (exp -> term .)
    COMMA           reduce using rule 33 (exp -> term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70


state 49

    (40) factor -> PLUS . ID
    (42) factor -> PLUS . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    ID              shift and go to state 71
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    cte                            shift and go to state 72

state 50

    (41) factor -> MINUS . ID
    (43) factor -> MINUS . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    ID              shift and go to state 73
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    cte                            shift and go to state 74

state 51

    (36) term -> factor .

    TIMES           reduce using rule 36 (term -> factor .)
    DIVIDE          reduce using rule 36 (term -> factor .)
    GT              reduce using rule 36 (term -> factor .)
    LT              reduce using rule 36 (term -> factor .)
    NE              reduce using rule 36 (term -> factor .)
    PLUS            reduce using rule 36 (term -> factor .)
    MINUS           reduce using rule 36 (term -> factor .)
    SEMICOLON       reduce using rule 36 (term -> factor .)
    RPAREN          reduce using rule 36 (term -> factor .)
    COMMA           reduce using rule 36 (term -> factor .)


state 52

    (39) factor -> LPAREN . expression RPAREN
    (29) expression -> . exp
    (30) expression -> . exp GT exp
    (31) expression -> . exp LT exp
    (32) expression -> . exp NE exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 75
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 53

    (45) factor -> cte .

    TIMES           reduce using rule 45 (factor -> cte .)
    DIVIDE          reduce using rule 45 (factor -> cte .)
    GT              reduce using rule 45 (factor -> cte .)
    LT              reduce using rule 45 (factor -> cte .)
    NE              reduce using rule 45 (factor -> cte .)
    PLUS            reduce using rule 45 (factor -> cte .)
    MINUS           reduce using rule 45 (factor -> cte .)
    SEMICOLON       reduce using rule 45 (factor -> cte .)
    RPAREN          reduce using rule 45 (factor -> cte .)
    COMMA           reduce using rule 45 (factor -> cte .)


state 54

    (46) cte -> CTE_INT .

    TIMES           reduce using rule 46 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 46 (cte -> CTE_INT .)
    GT              reduce using rule 46 (cte -> CTE_INT .)
    LT              reduce using rule 46 (cte -> CTE_INT .)
    NE              reduce using rule 46 (cte -> CTE_INT .)
    PLUS            reduce using rule 46 (cte -> CTE_INT .)
    MINUS           reduce using rule 46 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 46 (cte -> CTE_INT .)
    RPAREN          reduce using rule 46 (cte -> CTE_INT .)
    COMMA           reduce using rule 46 (cte -> CTE_INT .)


state 55

    (47) cte -> CTE_FLOAT .

    TIMES           reduce using rule 47 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 47 (cte -> CTE_FLOAT .)
    GT              reduce using rule 47 (cte -> CTE_FLOAT .)
    LT              reduce using rule 47 (cte -> CTE_FLOAT .)
    NE              reduce using rule 47 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 47 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 47 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 47 (cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 47 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 47 (cte -> CTE_FLOAT .)


state 56

    (20) condition -> IF LPAREN expression . RPAREN body
    (21) condition -> IF LPAREN expression . RPAREN body ELSE body

    RPAREN          shift and go to state 76


state 57

    (22) cycle -> DO body WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 77


state 58

    (23) print -> PRINT LPAREN list_print_expression . RPAREN SEMICOLON
    (26) list_print_expression -> list_print_expression . COMMA expression

    RPAREN          shift and go to state 78
    COMMA           shift and go to state 79


state 59

    (24) print -> PRINT LPAREN list_print_cte . RPAREN SEMICOLON
    (28) list_print_cte -> list_print_cte . COMMA CTE_STRING

    RPAREN          shift and go to state 80
    COMMA           shift and go to state 81


state 60

    (25) list_print_expression -> expression .

    RPAREN          reduce using rule 25 (list_print_expression -> expression .)
    COMMA           reduce using rule 25 (list_print_expression -> expression .)


state 61

    (27) list_print_cte -> CTE_STRING .

    RPAREN          reduce using rule 27 (list_print_cte -> CTE_STRING .)
    COMMA           reduce using rule 27 (list_print_cte -> CTE_STRING .)


state 62

    (5) vars -> VAR list_vars COLON type SEMICOLON .

    MAIN            reduce using rule 5 (vars -> VAR list_vars COLON type SEMICOLON .)
    VAR             reduce using rule 5 (vars -> VAR list_vars COLON type SEMICOLON .)
    ID              reduce using rule 5 (vars -> VAR list_vars COLON type SEMICOLON .)


state 63

    (19) assign -> ID EQUAL expression SEMICOLON .

    RBRACE          reduce using rule 19 (assign -> ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 19 (assign -> ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 19 (assign -> ID EQUAL expression SEMICOLON .)
    DO              reduce using rule 19 (assign -> ID EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 19 (assign -> ID EQUAL expression SEMICOLON .)


state 64

    (30) expression -> exp GT . exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    exp                            shift and go to state 82
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 65

    (31) expression -> exp LT . exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    exp                            shift and go to state 83
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 66

    (32) expression -> exp NE . exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    exp                            shift and go to state 84
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 67

    (34) exp -> exp PLUS . term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    term                           shift and go to state 85
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 68

    (35) exp -> exp MINUS . term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    term                           shift and go to state 86
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 69

    (37) term -> term TIMES . factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    factor                         shift and go to state 87
    cte                            shift and go to state 53

state 70

    (38) term -> term DIVIDE . factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    factor                         shift and go to state 88
    cte                            shift and go to state 53

state 71

    (40) factor -> PLUS ID .

    TIMES           reduce using rule 40 (factor -> PLUS ID .)
    DIVIDE          reduce using rule 40 (factor -> PLUS ID .)
    GT              reduce using rule 40 (factor -> PLUS ID .)
    LT              reduce using rule 40 (factor -> PLUS ID .)
    NE              reduce using rule 40 (factor -> PLUS ID .)
    PLUS            reduce using rule 40 (factor -> PLUS ID .)
    MINUS           reduce using rule 40 (factor -> PLUS ID .)
    SEMICOLON       reduce using rule 40 (factor -> PLUS ID .)
    RPAREN          reduce using rule 40 (factor -> PLUS ID .)
    COMMA           reduce using rule 40 (factor -> PLUS ID .)


state 72

    (42) factor -> PLUS cte .

    TIMES           reduce using rule 42 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 42 (factor -> PLUS cte .)
    GT              reduce using rule 42 (factor -> PLUS cte .)
    LT              reduce using rule 42 (factor -> PLUS cte .)
    NE              reduce using rule 42 (factor -> PLUS cte .)
    PLUS            reduce using rule 42 (factor -> PLUS cte .)
    MINUS           reduce using rule 42 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 42 (factor -> PLUS cte .)
    RPAREN          reduce using rule 42 (factor -> PLUS cte .)
    COMMA           reduce using rule 42 (factor -> PLUS cte .)


state 73

    (41) factor -> MINUS ID .

    TIMES           reduce using rule 41 (factor -> MINUS ID .)
    DIVIDE          reduce using rule 41 (factor -> MINUS ID .)
    GT              reduce using rule 41 (factor -> MINUS ID .)
    LT              reduce using rule 41 (factor -> MINUS ID .)
    NE              reduce using rule 41 (factor -> MINUS ID .)
    PLUS            reduce using rule 41 (factor -> MINUS ID .)
    MINUS           reduce using rule 41 (factor -> MINUS ID .)
    SEMICOLON       reduce using rule 41 (factor -> MINUS ID .)
    RPAREN          reduce using rule 41 (factor -> MINUS ID .)
    COMMA           reduce using rule 41 (factor -> MINUS ID .)


state 74

    (43) factor -> MINUS cte .

    TIMES           reduce using rule 43 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 43 (factor -> MINUS cte .)
    GT              reduce using rule 43 (factor -> MINUS cte .)
    LT              reduce using rule 43 (factor -> MINUS cte .)
    NE              reduce using rule 43 (factor -> MINUS cte .)
    PLUS            reduce using rule 43 (factor -> MINUS cte .)
    MINUS           reduce using rule 43 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 43 (factor -> MINUS cte .)
    RPAREN          reduce using rule 43 (factor -> MINUS cte .)
    COMMA           reduce using rule 43 (factor -> MINUS cte .)


state 75

    (39) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 89


state 76

    (20) condition -> IF LPAREN expression RPAREN . body
    (21) condition -> IF LPAREN expression RPAREN . body ELSE body
    (13) body -> . LBRACE return_statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 90

state 77

    (22) cycle -> DO body WHILE LPAREN . expression RPAREN SEMICOLON
    (29) expression -> . exp
    (30) expression -> . exp GT exp
    (31) expression -> . exp LT exp
    (32) expression -> . exp NE exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 91
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 78

    (23) print -> PRINT LPAREN list_print_expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 92


state 79

    (26) list_print_expression -> list_print_expression COMMA . expression
    (29) expression -> . exp
    (30) expression -> . exp GT exp
    (31) expression -> . exp LT exp
    (32) expression -> . exp NE exp
    (33) exp -> . term
    (34) exp -> . exp PLUS term
    (35) exp -> . exp MINUS term
    (36) term -> . factor
    (37) term -> . term TIMES factor
    (38) term -> . term DIVIDE factor
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS ID
    (41) factor -> . MINUS ID
    (42) factor -> . PLUS cte
    (43) factor -> . MINUS cte
    (44) factor -> . ID
    (45) factor -> . cte
    (46) cte -> . CTE_INT
    (47) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 45
    CTE_INT         shift and go to state 54
    CTE_FLOAT       shift and go to state 55

    expression                     shift and go to state 93
    exp                            shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 51
    cte                            shift and go to state 53

state 80

    (24) print -> PRINT LPAREN list_print_cte RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 94


state 81

    (28) list_print_cte -> list_print_cte COMMA . CTE_STRING

    CTE_STRING      shift and go to state 95


state 82

    (30) expression -> exp GT exp .
    (34) exp -> exp . PLUS term
    (35) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 30 (expression -> exp GT exp .)
    RPAREN          reduce using rule 30 (expression -> exp GT exp .)
    COMMA           reduce using rule 30 (expression -> exp GT exp .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68


state 83

    (31) expression -> exp LT exp .
    (34) exp -> exp . PLUS term
    (35) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 31 (expression -> exp LT exp .)
    RPAREN          reduce using rule 31 (expression -> exp LT exp .)
    COMMA           reduce using rule 31 (expression -> exp LT exp .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68


state 84

    (32) expression -> exp NE exp .
    (34) exp -> exp . PLUS term
    (35) exp -> exp . MINUS term

    SEMICOLON       reduce using rule 32 (expression -> exp NE exp .)
    RPAREN          reduce using rule 32 (expression -> exp NE exp .)
    COMMA           reduce using rule 32 (expression -> exp NE exp .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68


state 85

    (34) exp -> exp PLUS term .
    (37) term -> term . TIMES factor
    (38) term -> term . DIVIDE factor

    GT              reduce using rule 34 (exp -> exp PLUS term .)
    LT              reduce using rule 34 (exp -> exp PLUS term .)
    NE              reduce using rule 34 (exp -> exp PLUS term .)
    PLUS            reduce using rule 34 (exp -> exp PLUS term .)
    MINUS           reduce using rule 34 (exp -> exp PLUS term .)
    SEMICOLON       reduce using rule 34 (exp -> exp PLUS term .)
    RPAREN          reduce using rule 34 (exp -> exp PLUS term .)
    COMMA           reduce using rule 34 (exp -> exp PLUS term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70


state 86

    (35) exp -> exp MINUS term .
    (37) term -> term . TIMES factor
    (38) term -> term . DIVIDE factor

    GT              reduce using rule 35 (exp -> exp MINUS term .)
    LT              reduce using rule 35 (exp -> exp MINUS term .)
    NE              reduce using rule 35 (exp -> exp MINUS term .)
    PLUS            reduce using rule 35 (exp -> exp MINUS term .)
    MINUS           reduce using rule 35 (exp -> exp MINUS term .)
    SEMICOLON       reduce using rule 35 (exp -> exp MINUS term .)
    RPAREN          reduce using rule 35 (exp -> exp MINUS term .)
    COMMA           reduce using rule 35 (exp -> exp MINUS term .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70


state 87

    (37) term -> term TIMES factor .

    TIMES           reduce using rule 37 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 37 (term -> term TIMES factor .)
    GT              reduce using rule 37 (term -> term TIMES factor .)
    LT              reduce using rule 37 (term -> term TIMES factor .)
    NE              reduce using rule 37 (term -> term TIMES factor .)
    PLUS            reduce using rule 37 (term -> term TIMES factor .)
    MINUS           reduce using rule 37 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 37 (term -> term TIMES factor .)
    RPAREN          reduce using rule 37 (term -> term TIMES factor .)
    COMMA           reduce using rule 37 (term -> term TIMES factor .)


state 88

    (38) term -> term DIVIDE factor .

    TIMES           reduce using rule 38 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 38 (term -> term DIVIDE factor .)
    GT              reduce using rule 38 (term -> term DIVIDE factor .)
    LT              reduce using rule 38 (term -> term DIVIDE factor .)
    NE              reduce using rule 38 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 38 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 38 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 38 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 38 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 38 (term -> term DIVIDE factor .)


state 89

    (39) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 39 (factor -> LPAREN expression RPAREN .)


state 90

    (20) condition -> IF LPAREN expression RPAREN body .
    (21) condition -> IF LPAREN expression RPAREN body . ELSE body

    RBRACE          reduce using rule 20 (condition -> IF LPAREN expression RPAREN body .)
    ID              reduce using rule 20 (condition -> IF LPAREN expression RPAREN body .)
    IF              reduce using rule 20 (condition -> IF LPAREN expression RPAREN body .)
    DO              reduce using rule 20 (condition -> IF LPAREN expression RPAREN body .)
    PRINT           reduce using rule 20 (condition -> IF LPAREN expression RPAREN body .)
    ELSE            shift and go to state 96


state 91

    (22) cycle -> DO body WHILE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 97


state 92

    (23) print -> PRINT LPAREN list_print_expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 23 (print -> PRINT LPAREN list_print_expression RPAREN SEMICOLON .)
    ID              reduce using rule 23 (print -> PRINT LPAREN list_print_expression RPAREN SEMICOLON .)
    IF              reduce using rule 23 (print -> PRINT LPAREN list_print_expression RPAREN SEMICOLON .)
    DO              reduce using rule 23 (print -> PRINT LPAREN list_print_expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 23 (print -> PRINT LPAREN list_print_expression RPAREN SEMICOLON .)


state 93

    (26) list_print_expression -> list_print_expression COMMA expression .

    RPAREN          reduce using rule 26 (list_print_expression -> list_print_expression COMMA expression .)
    COMMA           reduce using rule 26 (list_print_expression -> list_print_expression COMMA expression .)


state 94

    (24) print -> PRINT LPAREN list_print_cte RPAREN SEMICOLON .

    RBRACE          reduce using rule 24 (print -> PRINT LPAREN list_print_cte RPAREN SEMICOLON .)
    ID              reduce using rule 24 (print -> PRINT LPAREN list_print_cte RPAREN SEMICOLON .)
    IF              reduce using rule 24 (print -> PRINT LPAREN list_print_cte RPAREN SEMICOLON .)
    DO              reduce using rule 24 (print -> PRINT LPAREN list_print_cte RPAREN SEMICOLON .)
    PRINT           reduce using rule 24 (print -> PRINT LPAREN list_print_cte RPAREN SEMICOLON .)


state 95

    (28) list_print_cte -> list_print_cte COMMA CTE_STRING .

    RPAREN          reduce using rule 28 (list_print_cte -> list_print_cte COMMA CTE_STRING .)
    COMMA           reduce using rule 28 (list_print_cte -> list_print_cte COMMA CTE_STRING .)


state 96

    (21) condition -> IF LPAREN expression RPAREN body ELSE . body
    (13) body -> . LBRACE return_statement RBRACE

    LBRACE          shift and go to state 14

    body                           shift and go to state 98

state 97

    (22) cycle -> DO body WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 99


state 98

    (21) condition -> IF LPAREN expression RPAREN body ELSE body .

    RBRACE          reduce using rule 21 (condition -> IF LPAREN expression RPAREN body ELSE body .)
    ID              reduce using rule 21 (condition -> IF LPAREN expression RPAREN body ELSE body .)
    IF              reduce using rule 21 (condition -> IF LPAREN expression RPAREN body ELSE body .)
    DO              reduce using rule 21 (condition -> IF LPAREN expression RPAREN body ELSE body .)
    PRINT           reduce using rule 21 (condition -> IF LPAREN expression RPAREN body ELSE body .)


state 99

    (22) cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 22 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 22 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 22 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 22 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 22 (cycle -> DO body WHILE LPAREN expression RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 14 resolved as shift
WARNING: shift/reduce conflict for IF in state 14 resolved as shift
WARNING: shift/reduce conflict for DO in state 14 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 14 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 20 resolved as shift
WARNING: shift/reduce conflict for ID in state 20 resolved as shift
WARNING: shift/reduce conflict for IF in state 20 resolved as shift
WARNING: shift/reduce conflict for DO in state 20 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 20 resolved as shift
